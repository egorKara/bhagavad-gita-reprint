#!/usr/bin/env node

const SecurityAgent = require('../services/security-agent');
const path = require('path');
const fs = require('fs');

class SecurityCLI {
  constructor() {
    this.agent = new SecurityAgent();
    this.workspacePath = process.cwd();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
  showHelp() {
    console.log(`
üîí Cursor Security Agent CLI v1.0

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node security-cli.js [–∫–æ–º–∞–Ω–¥–∞] [–æ–ø—Ü–∏–∏]

–ö–æ–º–∞–Ω–¥—ã:
  scan                    - –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  monitor                - –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  stop                   - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  report                 - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
  stats                  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  help                   - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–û–ø—Ü–∏–∏:
  --path <–ø—É—Ç—å>          - –ü—É—Ç—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
  --interval <–º–∏–Ω—É—Ç—ã>    - –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)
  --depth <—É—Ä–æ–≤–µ–Ω—å>      - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)

–ü—Ä–∏–º–µ—Ä—ã:
  node security-cli.js scan
  node security-cli.js monitor --interval 10
  node security-cli.js scan --path /path/to/project
  node security-cli.js stop
`);
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  parseArgs() {
    const args = process.argv.slice(2);
    const command = args[0];
    const options = {};

    for (let i = 1; i < args.length; i++) {
      if (args[i] === '--path' && args[i + 1]) {
        options.path = args[i + 1];
        i++;
      } else if (args[i] === '--interval' && args[i + 1]) {
        options.interval = parseInt(args[i + 1]);
        i++;
      } else if (args[i] === '--depth' && args[i + 1]) {
        options.depth = parseInt(args[i + 1]);
        i++;
      }
    }

    return { command, options };
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  async runScan(options) {
    const scanPath = options.path || this.workspacePath;
    
    console.log(`üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤: ${scanPath}`);
    
    try {
      const results = await this.agent.performScan(scanPath);
      
      if (results && results.length > 0) {
        console.log(`\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${results.length} —Ñ–∞–π–ª–æ–≤ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏!`);
        console.log('üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ security-scan-report.json');
        console.log('üîê –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é GitHub Secrets –≤ github-secrets-to-create.md');
      } else {
        console.log('‚úÖ –°–µ–∫—Ä–µ—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!');
      }
      
      return results;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
      process.exit(1);
    }
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  async startMonitoring(options) {
    const scanPath = options.path || this.workspacePath;
    
    if (options.interval) {
      this.agent.scanInterval = options.interval * 60 * 1000;
    }
    
    console.log(`üîÑ –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤: ${scanPath}`);
    console.log(`‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${this.agent.scanInterval / 1000} —Å–µ–∫—É–Ω–¥`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
      this.agent.stopContinuousMonitoring();
      process.exit(0);
    });
    
    process.on('SIGTERM', () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
      this.agent.stopContinuousMonitoring();
      process.exit(0);
    });
    
    this.agent.startContinuousMonitoring(scanPath);
    
    // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
    console.log('üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  stopMonitoring() {
    this.agent.stopContinuousMonitoring();
    console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç
  showReport() {
    const reportPath = path.join(this.workspacePath, 'security-scan-report.json');
    
    if (!fs.existsSync(reportPath)) {
      console.log('üìä –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.');
      return;
    }
    
    try {
      const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
      
      console.log('\nüìä –û–¢–ß–ï–¢ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò');
      console.log('=' .repeat(50));
      console.log(`üìÖ –î–∞—Ç–∞: ${new Date(report.timestamp).toLocaleString('ru-RU')}`);
      console.log(`üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${report.totalFiles}`);
      console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: ${report.criticalFindings}`);
      console.log(`‚ö†Ô∏è  –í—ã—Å–æ–∫–∏–µ: ${report.highFindings}`);
      console.log(`üî∂ –°—Ä–µ–¥–Ω–∏–µ: ${report.mediumFindings}`);
      console.log(`üîµ –ù–∏–∑–∫–∏–µ: ${report.lowFindings}`);
      
      if (report.details && report.details.length > 0) {
        console.log('\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∞–π–ª–∞–º:');
        report.details.forEach((result, index) => {
          console.log(`\n${index + 1}. ${result.file}`);
          result.findings.forEach((finding, fIndex) => {
            console.log(`   ${fIndex + 1}. [${finding.severity}] –°—Ç—Ä–æ–∫–∏: ${finding.lineNumbers.join(', ')}`);
          });
        });
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error.message);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  showStats() {
    const stats = this.agent.getStats();
    
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ì–ï–ù–¢–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò');
    console.log('=' .repeat(50));
    console.log(`üîÑ –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${stats.isMonitoring ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`‚ö° –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${stats.isRunning ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' : '–û–∂–∏–¥–∞–µ—Ç'}`);
    console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${stats.lastScanTime ? new Date(stats.lastScanTime).toLocaleString('ru-RU') : '–ù–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å'}`);
    console.log(`üìä –í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–æ–∫: ${stats.totalScans}`);
  }

  // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ CLI
  async run() {
    const { command, options } = this.parseArgs();
    
    if (!command || command === 'help') {
      this.showHelp();
      return;
    }
    
    try {
      switch (command) {
        case 'scan':
          await this.runScan(options);
          break;
          
        case 'monitor':
          await this.startMonitoring(options);
          break;
          
        case 'stop':
          this.stopMonitoring();
          break;
          
        case 'report':
          this.showReport();
          break;
          
        case 'stats':
          this.showStats();
          break;
          
        default:
          console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
          this.showHelp();
          process.exit(1);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ CLI –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const cli = new SecurityCLI();
  cli.run().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = SecurityCLI;