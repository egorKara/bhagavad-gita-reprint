/**
 * JavaScript –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
 * –í–∫–ª—é—á–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∏—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
 */

class AdminOrdersManager {
    constructor() {
        this.currentPage = 1;
        this.ordersPerPage = 20;
        this.allOrders = [];
        this.filteredOrders = [];
        this.currentOrder = null;
        this.adminToken = null;

        this.init();
    }

    init() {
        this.ensureAuth();
        this.loadOrders();
        this.bindEvents();
    }

    ensureAuth() {
        const stored = sessionStorage.getItem('admin_token');
        if (stored) {
            this.adminToken = stored;
            return;
        }
        const token = window.prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        if (token && token.trim()) {
            this.adminToken = token.trim();
            sessionStorage.setItem('admin_token', this.adminToken);
        }
    }

    getAuthHeaders() {
        return this.adminToken ? { Authorization: `Bearer ${this.adminToken}` } : {};
    }

    bindEvents() {
        // –ü–æ–∏—Å–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                if (e.target.value.length >= 3 || e.target.value.length === 0) {
                    this.searchOrders();
                }
            });
        }

        // –ü–æ–∏—Å–∫ –ø–æ Enter
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.searchOrders();
            }
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
     */
    async loadOrders() {
        try {
            const response = await fetch('/api/orders/list', {
                headers: this.getAuthHeaders()
            });
            const data = await response.json();

            if (data.success) {
                this.allOrders = data.data;
                this.filteredOrders = [...this.allOrders];
                this.displayOrders();
                this.updatePagination();
                this.loadStats();
            } else {
                this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: ' + data.error);
            }
        } catch {
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
     */
    displayOrders() {
        const tbody = document.getElementById('orders-table-body');
        if (!tbody) return;

        const startIndex = (this.currentPage - 1) * this.ordersPerPage;
        const endIndex = startIndex + this.ordersPerPage;
        const pageOrders = this.filteredOrders.slice(startIndex, endIndex);

        tbody.innerHTML = '';

        if (pageOrders.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="9" style="text-align: center; padding: 40px;">
                        <p style="color: var(--text-light); font-size: 1.1rem;">
                            ${this.filteredOrders.length === 0 ? '–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ'}
                        </p>
                    </td>
                </tr>
            `;
            return;
        }

        pageOrders.forEach((order) => {
            const row = this.createOrderRow(order);
            tbody.appendChild(row);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞
     */
    createOrderRow(order) {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td><code>${order.id.slice(0, 8)}...</code></td>
            <td>${this.formatDate(order.createdAt)}</td>
            <td>${order.firstName} ${order.lastName}</td>
            <td>${order.email}</td>
            <td>${order.phone}</td>
            <td>${order.quantity}</td>
            <td><strong>${order.totalAmount} ‚ÇΩ</strong></td>
            <td>${this.createStatusBadge(order.status)}</td>
            <td>${this.createActionButtons(order)}</td>
        `;

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        row.addEventListener('click', (e) => {
            if (!e.target.closest('.action-btn')) {
                this.showOrderDetails(order);
            }
        });

        return row;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–π–¥–∂–∞ —Å—Ç–∞—Ç—É—Å–∞
     */
    createStatusBadge(status) {
        const statusText = this.getStatusText(status);
        return `<span class="status-badge status-${status}">${statusText}</span>`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusText(status) {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ Generic Object Injection Sink
        const validStatuses = ['new', 'processing', 'shipped', 'delivered', 'cancelled'];

        if (!validStatuses.includes(status)) {
            return status; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        }

        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç—É—Å–∞–º —á–µ—Ä–µ–∑ switch
        switch (status) {
            case 'new':
                return '–ù–æ–≤—ã–π';
            case 'processing':
                return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
            case 'shipped':
                return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
            case 'delivered':
                return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
            case 'cancelled':
                return '–û—Ç–º–µ–Ω–µ–Ω';
            default:
                return status;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
     */
    createActionButtons(order) {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –±–µ–∑ inline onclick
        const actionDiv = document.createElement('div');
        actionDiv.className = 'action-buttons';

        const viewBtn = document.createElement('button');
        viewBtn.className = 'action-btn view';
        viewBtn.textContent = 'üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä';
        viewBtn.addEventListener('click', () => adminManager.showOrderDetails(order.id));

        const editBtn = document.createElement('button');
        editBtn.className = 'action-btn edit';
        editBtn.textContent = '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å';
        editBtn.addEventListener('click', () => adminManager.editOrder(order.id));

        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'action-btn delete';
        deleteBtn.textContent = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å';
        deleteBtn.addEventListener('click', () => adminManager.deleteOrder(order.id));

        actionDiv.appendChild(viewBtn);
        actionDiv.appendChild(editBtn);
        actionDiv.appendChild(deleteBtn);

        return actionDiv.outerHTML;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    /**
     * –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤
     */
    searchOrders() {
        const query = document.getElementById('search-input').value.toLowerCase();

        if (query.length === 0) {
            this.filteredOrders = [...this.allOrders];
        } else {
            this.filteredOrders = this.allOrders.filter(
                (order) =>
                    order.firstName.toLowerCase().includes(query) ||
                    order.lastName.toLowerCase().includes(query) ||
                    order.email.toLowerCase().includes(query) ||
                    order.phone.includes(query) ||
                    order.id.toLowerCase().includes(query)
            );
        }

        this.currentPage = 1;
        this.displayOrders();
        this.updatePagination();
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
     */
    filterOrders() {
        const statusFilter = document.getElementById('status-filter').value;
        const dateFilter = document.getElementById('date-filter').value;

        this.filteredOrders = this.allOrders.filter((order) => {
            let matchesStatus = true;
            let matchesDate = true;

            // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if (statusFilter && order.status !== statusFilter) {
                matchesStatus = false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
            if (dateFilter) {
                const orderDate = new Date(order.createdAt);
                const now = new Date();

                switch (dateFilter) {
                    case 'today':
                        matchesDate = orderDate.toDateString() === now.toDateString();
                        break;
                    case 'week':
                        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                        matchesDate = orderDate >= weekAgo;
                        break;
                    case 'month':
                        const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                        matchesDate = orderDate >= monthAgo;
                        break;
                }
            }

            return matchesStatus && matchesDate;
        });

        this.currentPage = 1;
        this.displayOrders();
        this.updatePagination();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     */
    updatePagination() {
        const pagination = document.getElementById('pagination');
        if (!pagination) return;

        const totalPages = Math.ceil(this.filteredOrders.length / this.ordersPerPage);

        if (totalPages <= 1) {
            pagination.innerHTML = '';
            return;
        }

        let paginationHTML = '';

        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        paginationHTML += `
            <button onclick="adminManager.goToPage(${this.currentPage - 1})" 
                    ${this.currentPage === 1 ? 'disabled' : ''}>
                ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
            </button>
        `;

        // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        for (let i = 1; i <= totalPages; i++) {
            if (i === 1 || i === totalPages || (i >= this.currentPage - 2 && i <= this.currentPage + 2)) {
                paginationHTML += `
                    <button onclick="adminManager.goToPage(${i})" 
                            class="${i === this.currentPage ? 'active' : ''}">
                        ${i}
                    </button>
                `;
            } else if (i === this.currentPage - 3 || i === this.currentPage + 3) {
                paginationHTML += '<span>...</span>';
            }
        }

        // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        paginationHTML += `
            <button onclick="adminManager.goToPage(${this.currentPage + 1})" 
                    ${this.currentPage === totalPages ? 'disabled' : ''}>
                –°–ª–µ–¥—É—é—â–∞—è ‚Üí
            </button>
        `;

        pagination.innerHTML = paginationHTML;
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    goToPage(page) {
        const totalPages = Math.ceil(this.filteredOrders.length / this.ordersPerPage);
        if (page < 1 || page > totalPages) return;

        this.currentPage = page;
        this.displayOrders();
        this.updatePagination();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
     */
    async showOrderDetails(orderId) {
        try {
            let order;

            if (typeof orderId === 'string') {
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑
                const response = await fetch(`/api/orders/${orderId}`, {
                    headers: this.getAuthHeaders()
                });
                const data = await response.json();

                if (data.success) {
                    order = data.data;
                } else {
                    this.showError('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }
            } else {
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
                order = orderId;
            }

            this.currentOrder = order;
            this.displayOrderModal(order);
        } catch {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞');
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
     */
    displayOrderModal(order) {
        const modal = document.getElementById('orderModal');
        const details = document.getElementById('orderDetails');

        if (!modal || !details) return;

        details.innerHTML = `
            <div class="order-details">
                <div class="order-detail-row">
                    <span class="order-detail-label">ID –∑–∞–∫–∞–∑–∞:</span>
                    <span class="order-detail-value">${order.id}</span>
                </div>
                <div class="order-detail-row">
                    <span class="order-detail-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                    <span class="order-detail-value">${this.formatDate(order.createdAt)}</span>
                </div>
                <div class="order-detail-row">
                    <span class="order-detail-label">–°—Ç–∞—Ç—É—Å:</span>
                    <span class="order-detail-value">${this.createStatusBadge(order.status)}</span>
                </div>
                <div class="order-detail-row">
                    <span class="order-detail-label">–ò–º—è:</span>
                    <span class="order-detail-value">${order.firstName}</span>
                </div>
                <div class="order-detail-row">
                    <span class="order-detail-label">–§–∞–º–∏–ª–∏—è:</span>
                    <span class="order-detail-value">${order.lastName}</span>
                </div>
                <div class="order-detail-row">
                    <span class="order-detail-label">Email:</span>
                    <span class="order-detail-value">${order.email}</span>
                </div>
                <div class="order-detail-row">
                    <span class="order-detail-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                    <span class="order-detail-value">${order.phone}</span>
                </div>
                <div class="order-detail-row">
                    <span class="order-detail-label">–ê–¥—Ä–µ—Å:</span>
                    <span class="order-detail-value">${order.address}</span>
                </div>
                <div class="order-detail-row">
                    <span class="order-detail-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                    <span class="order-detail-value">${order.quantity}</span>
                </div>
                <div class="order-detail-row">
                    <span class="order-detail-label">–°—É–º–º–∞:</span>
                    <span class="order-detail-value"><strong>${order.totalAmount} ‚ÇΩ</strong></span>
                </div>
                ${
                    order.message
                        ? `
                <div class="order-detail-row">
                    <span class="order-detail-label">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</span>
                    <span class="order-detail-value">${order.message}</span>
                </div>
                `
                        : ''
                }
            </div>
        `;

        modal.style.display = 'flex';
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeOrderModal() {
        const modal = document.getElementById('orderModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
     */
    async updateOrderStatus() {
        if (!this.currentOrder) return;

        const newStatus = document.getElementById('orderStatusSelect')?.value || 'processing';

        try {
            const response = await fetch(`/api/orders/${this.currentOrder.id}/status`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeaders()
                },
                body: JSON.stringify({ status: newStatus })
            });
            const data = await response.json();

            if (data.success) {
                this.showSuccess('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
                this.refreshOrders();
            } else {
                this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + data.error);
            }
        } catch {
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
     */
    async deleteOrder(orderId) {
        if (!orderId && this.currentOrder) {
            orderId = this.currentOrder.id;
        }

        try {
            const response = await fetch(`/api/orders/${orderId}`, {
                method: 'DELETE',
                headers: this.getAuthHeaders()
            });
            const data = await response.json();

            if (data.success) {
                this.showSuccess('–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω');
                this.refreshOrders();
            } else {
                this.showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + data.error);
            }
        } catch {
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
     */
    async exportToCSV() {
        try {
            const response = await fetch('/api/orders/export/csv', {
                headers: this.getAuthHeaders()
            });

            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `orders-${new Date().toISOString().slice(0, 10)}.csv`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);

                this.showSuccess('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
            } else {
                const data = await response.json();
                this.showError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + data.error);
            }
        } catch {
            this.showError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async loadStats() {
        try {
            const response = await fetch('/api/orders/stats/overview', {
                headers: this.getAuthHeaders()
            });
            const data = await response.json();

            if (data.success) {
                this.displayStats(data.data);
            }
        } catch {
            // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    displayStats(stats) {
        document.getElementById('total-orders').textContent = stats.totalOrders;
        document.getElementById('total-revenue').textContent = stats.totalRevenue + ' ‚ÇΩ';
        document.getElementById('average-order').textContent = Math.round(stats.averageOrderValue) + ' ‚ÇΩ';

        // –ü–æ–¥—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date().toISOString().slice(0, 10);
        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –±–µ–∑ Generic Object Injection Sink
        let todayOrders = 0;
        if (stats.ordersByMonth && typeof stats.ordersByMonth === 'object') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á –±–µ–∑–æ–ø–∞—Å–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)
            if (typeof today === 'string' && /^\d{4}-\d{2}-\d{2}$/.test(today)) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Object.prototype.hasOwnProperty
                if (Object.prototype.hasOwnProperty.call(stats.ordersByMonth, today)) {
                    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Object.getOwnPropertyDescriptor
                    const todayData = Object.getOwnPropertyDescriptor(stats.ordersByMonth, today)?.value;
                    if (todayData && typeof todayData === 'object' && typeof todayData.count === 'number') {
                        todayOrders = todayData.count;
                    }
                }
            }
        }
        document.getElementById('today-orders').textContent = todayOrders;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    showStats() {
        const statsOverview = document.getElementById('stats-overview');
        if (statsOverview) {
            statsOverview.style.display = statsOverview.style.display === 'none' ? 'block' : 'none';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
     */
    refreshOrders() {
        this.loadOrders();
        this.showSuccess('–ó–∞–∫–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
     */
    showSuccess(message) {
        this.showMessage(message, 'success');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    showError(message) {
        this.showMessage(message, 'error');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    showMessage(message, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message message-${type}`;
        messageDiv.textContent = message;
        messageDiv.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 10001;
            animation: slideIn 0.3s ease;
            background: ${type === 'success' ? '#4caf50' : '#f44336'};
        `;

        document.body.appendChild(messageDiv);

        setTimeout(() => {
            messageDiv.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                if (messageDiv.parentNode) {
                    messageDiv.parentNode.removeChild(messageDiv);
                }
            }, 300);
        }, 3000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let adminManager;

document.addEventListener('DOMContentLoaded', () => {
    adminManager = new AdminOrdersManager();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML
/* eslint-disable no-unused-vars */
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ onclick)
function searchOrders() {
    if (adminManager) adminManager.searchOrders();
}

function filterOrders() {
    if (adminManager) adminManager.filterOrders();
}

function refreshOrders() {
    if (adminManager) adminManager.refreshOrders();
}

function exportToCSV() {
    if (adminManager) adminManager.exportToCSV();
}

function showStats() {
    if (adminManager) adminManager.showStats();
}

function closeOrderModal() {
    if (adminManager) adminManager.closeOrderModal();
}

function updateOrderStatus() {
    if (adminManager) adminManager.updateOrderStatus();
}

function deleteOrder() {
    if (adminManager) adminManager.deleteOrder();
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.addEventListener('click', (e) => {
    const modal = document.getElementById('order-modal');
    if (e.target === modal) {
        closeOrderModal();
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS –∞–Ω–∏–º–∞—Ü–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);
