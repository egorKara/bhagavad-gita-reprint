/**
 * ü§ñ SIMPLE CONTINUATION BOT
 * –ü—Ä–æ—Å—Ç–æ–π –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –±—ç–∫–≥—Ä–∞—É–Ω–¥ –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
 * –ß–∏—Ç–∞–µ—Ç TODO, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞–º—è—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏
 */

const fs = require('fs').promises;
const path = require('path');

class SimpleContinuationBot {
    constructor() {
        this.projectRoot = process.cwd();
        this.todoFile = path.join(this.projectRoot, 'PROJECT_TODO.md');
        this.currentTask = null;
        this.botName = 'Background Agent';
    }

    /**
     * üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
     */
    async continueWork(userMessage = '') {
        console.log(`ü§ñ ${this.botName}: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é...`);

        try {
            // üìã –ß–∏—Ç–∞–µ–º TODO —Å–ø–∏—Å–æ–∫
            const todos = await this.readProjectTodos();

            // üß† –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
            const context = await this.loadRelevantContext(userMessage);

            // üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
            const currentTask = await this.identifyCurrentTask(todos, userMessage);

            // üîß –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            const result = await this.executeTaskContinuation(currentTask, context);

            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:', error);
            return {
                success: false,
                error: error.message,
                suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PROJECT_TODO.md —Ñ–∞–π–ª–∞',
            };
        }
    }

    /**
     * üìã –ß—Ç–µ–Ω–∏–µ PROJECT_TODO.md
     */
    async readProjectTodos() {
        try {
            const todoContent = await fs.readFile(this.todoFile, 'utf8');
            return this.parseTodoContent(todoContent);
        } catch (error) {
            console.log('üìã PROJECT_TODO.md –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫...');
            return this.createBasicTodoList();
        }
    }

    /**
     * üìù –ü–∞—Ä—Å–∏–Ω–≥ TODO –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    parseTodoContent(content) {
        const todos = {
            active: [],
            completed: [],
            pending: [],
        };

        const lines = content.split('\n');
        let currentSection = null;

        for (const line of lines) {
            if (line.includes('## üîÑ –í –ü–†–û–¶–ï–°–°–ï') || line.includes('in_progress')) {
                currentSection = 'active';
                continue;
            }

            if (line.includes('## ‚úÖ –í–´–ü–û–õ–ù–ï–ù–û') || line.includes('completed')) {
                currentSection = 'completed';
                continue;
            }

            if (line.includes('## üìã –û–ñ–ò–î–ê–ï–¢') || line.includes('pending')) {
                currentSection = 'pending';
                continue;
            }

            // –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞—á–∏
            if (line.trim().startsWith('-') && currentSection) {
                const task = this.parseTaskLine(line);
                if (task) {
                    todos[currentSection].push(task);
                }
            }
        }

        console.log(
            `üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: –∞–∫—Ç–∏–≤–Ω—ã—Ö ${todos.active.length}, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö ${todos.completed.length}, –æ–∂–∏–¥–∞—é—â–∏—Ö ${todos.pending.length}`
        );
        return todos;
    }

    /**
     * üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—á–∏
     */
    parseTaskLine(line) {
        const match = line.match(/^-\s*(.+?)(?:\s*\((.+?)\))?$/);
        if (!match) return null;

        const content = match[1].trim();
        const meta = match[2] || '';

        return {
            id: this.generateTaskId(content),
            content,
            progress: this.extractProgress(meta),
            priority: this.extractPriority(content),
            context: this.extractContext(content),
        };
    }

    /**
     * üß† –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    async loadRelevantContext(userMessage) {
        const context = {
            userIntent: this.analyzeUserIntent(userMessage),
            projectState: await this.getProjectState(),
            serverStatus: await this.getLastKnownServerStatus(),
            recentActions: await this.getRecentActions(),
        };

        console.log(`üß† –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${context.userIntent}, —Å–µ—Ä–≤–µ—Ä: ${context.serverStatus}`);
        return context;
    }

    /**
     * üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
     */
    async identifyCurrentTask(todos, userMessage) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
        if (userMessage) {
            const specificTask = this.findTaskByKeywords(todos, userMessage);
            if (specificTask) {
                console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞: ${specificTask.content}`);
                return specificTask;
            }
        }

        // –ò–Ω–∞—á–µ –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
        if (todos.active.length > 0) {
            const currentTask = todos.active[0];
            console.log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É: ${currentTask.content}`);
            return currentTask;
        }

        // –ò–ª–∏ –ø–µ—Ä–≤—É—é –æ–∂–∏–¥–∞—é—â—É—é
        if (todos.pending.length > 0) {
            const nextTask = todos.pending[0];
            console.log(`üìã –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É: ${nextTask.content}`);
            return nextTask;
        }

        return null;
    }

    /**
     * üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
     */
    async executeTaskContinuation(task, context) {
        if (!task) {
            return {
                success: true,
                message: 'üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
                suggestion: '–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
            };
        }

        console.log(`üîß –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É: ${task.content}`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        const taskType = this.identifyTaskType(task);
        const handler = this.getTaskHandler(taskType);

        const result = await handler(task, context);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await this.updateTaskProgress(task, result);

        return {
            success: true,
            task,
            result,
            nextSteps: this.suggestNextSteps(task, result),
        };
    }

    /**
     * üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
     */
    identifyTaskType(task) {
        const content = task.content.toLowerCase();

        if (
            content.includes('—Å–µ—Ä–≤–µ—Ä') ||
            content.includes('ssh') ||
            content.includes('–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞')
        ) {
            return 'server_management';
        }

        if (content.includes('ssl') || content.includes('—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç')) {
            return 'ssl_management';
        }

        if (content.includes('telegram') || content.includes('–±–æ—Ç')) {
            return 'bot_management';
        }

        if (content.includes('–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å') || content.includes('security')) {
            return 'security_management';
        }

        if (content.includes('–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥') || content.includes('–ª–æ–≥–∏')) {
            return 'monitoring';
        }

        return 'general';
    }

    /**
     * üõ†Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–¥–∞—á
     */
    getTaskHandler(taskType) {
        const handlers = {
            server_management: this.handleServerTask.bind(this),
            ssl_management: this.handleSSLTask.bind(this),
            bot_management: this.handleBotTask.bind(this),
            security_management: this.handleSecurityTask.bind(this),
            monitoring: this.handleMonitoringTask.bind(this),
            general: this.handleGeneralTask.bind(this),
        };

        return handlers[taskType] || handlers['general'];
    }

    /**
     * üñ•Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∑–∞–¥–∞—á
     */
    async handleServerTask(task, context) {
        console.log('üñ•Ô∏è –í—ã–ø–æ–ª–Ω—è—é —Å–µ—Ä–≤–µ—Ä–Ω—É—é –∑–∞–¥–∞—á—É...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º SSH –¥–æ—Å—Ç—É–ø
        const sshStatus = await this.checkSSHAccess();

        if (!sshStatus.success) {
            return {
                status: 'blocked',
                issue: 'SSH Permission denied',
                solution: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–µ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Yandex Cloud Console',
                progress: '70%',
                nextAction: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
            };
        }

        // –ï—Å–ª–∏ SSH —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        return {
            status: 'in_progress',
            action: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤',
            progress: '80%',
            nextAction: '–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã',
        };
    }

    /**
     * üîí –û–±—Ä–∞–±–æ—Ç—á–∏–∫ SSL –∑–∞–¥–∞—á
     */
    async handleSSLTask(task, context) {
        console.log('üîí –ü—Ä–æ–≤–µ—Ä—è—é SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã...');

        return {
            status: 'checking',
            action: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤',
            domains: ['api.gita-1972-reprint.ru', 'gita-1972-reprint.ru'],
            nextAction: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏',
        };
    }

    /**
     * ü§ñ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –±–æ—Ç–æ–≤
     */
    async handleBotTask(task, context) {
        console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä—è—é Telegram –±–æ—Ç–æ–≤...');

        return {
            status: 'testing',
            action: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
            nextAction: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞',
        };
    }

    /**
     * üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    async handleSecurityTask(task, context) {
        console.log('üõ°Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å...');

        return {
            status: 'completed',
            action: '100% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞',
            details: 'GitHub Secrets –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, —Ç–æ–∫–µ–Ω—ã –∑–∞—â–∏—â–µ–Ω—ã',
        };
    }

    /**
     * üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    async handleMonitoringTask(task, context) {
        console.log('üìä –ü—Ä–æ–≤–µ—Ä—è—é —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');

        return {
            status: 'checking',
            action: '–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫',
            nextAction: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤',
        };
    }

    /**
     * üîß –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
     */
    async handleGeneralTask(task, context) {
        console.log('üîß –í—ã–ø–æ–ª–Ω—è—é –æ–±—â—É—é –∑–∞–¥–∞—á—É...');

        return {
            status: 'in_progress',
            action: '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–¥–∞—á–∏',
            nextAction: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–æ–≤',
        };
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    /**
     * üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    analyzeUserIntent(message) {
        if (!message) return 'continue_current';

        const msg = message.toLowerCase();

        if (msg.includes('—Å–µ—Ä–≤–µ—Ä') || msg.includes('–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞')) return 'server_focus';
        if (msg.includes('ssl') || msg.includes('—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç')) return 'ssl_focus';
        if (msg.includes('–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å')) return 'security_focus';
        if (msg.includes('telegram') || msg.includes('–±–æ—Ç')) return 'bot_focus';
        if (msg.includes('–ø—Ä–æ–¥–æ–ª–∂–∞–π')) return 'continue_current';

        return 'general_inquiry';
    }

    /**
     * üèóÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
     */
    async getProjectState() {
        return {
            repository: 'bhagavad-gita-reprint',
            branch: 'main',
            lastCommit: 'feat: üèÜ 100% –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!',
            status: 'active_development',
        };
    }

    /**
     * üñ•Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async getLastKnownServerStatus() {
        return {
            server: 'fhmqd2mct32i12bapfn1',
            ip: '46.21.247.218',
            status: 'RUNNING',
            ssh: 'Permission denied',
            lastCheck: new Date().toISOString(),
        };
    }

    /**
     * üìú –ù–µ–¥–∞–≤–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
     */
    async getRecentActions() {
        return [
            '–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
            'SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
            '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞',
            'Context Handoff —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞',
        ];
    }

    /**
     * üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
     */
    findTaskByKeywords(todos, message) {
        const keywords = message.toLowerCase().split(' ');
        const allTasks = [...todos.active, ...todos.pending];

        for (const task of allTasks) {
            const taskContent = task.content.toLowerCase();
            if (keywords.some(keyword => taskContent.includes(keyword))) {
                return task;
            }
        }

        return null;
    }

    /**
     * üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞–¥–∞—á–∏
     */
    generateTaskId(content) {
        return content
            .toLowerCase()
            .replace(/[^\w\s]/g, '')
            .replace(/\s+/g, '_')
            .substring(0, 30);
    }

    /**
     * üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    extractProgress(meta) {
        const match = meta.match(/(\d+)%/);
        return match ? parseInt(match[1]) : 0;
    }

    /**
     * ‚ö° –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
     */
    extractPriority(content) {
        if (content.includes('–ö–†–ò–¢–ò–ß–ù–û') || content.includes('üî•')) return 'critical';
        if (content.includes('–í–ê–ñ–ù–û') || content.includes('‚ö°')) return 'high';
        return 'normal';
    }

    /**
     * üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    extractContext(content) {
        // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —ç–º–æ–¥–∑–∏ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if (content.includes('üñ•Ô∏è') || content.includes('—Å–µ—Ä–≤–µ—Ä')) return 'server';
        if (content.includes('üîí') || content.includes('ssl')) return 'security';
        if (content.includes('ü§ñ') || content.includes('telegram')) return 'automation';
        return 'general';
    }

    /**
     * ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏
     */
    async updateTaskProgress(task, result) {
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª—è—é –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏: ${task.content} -> ${result.status}`);
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PROJECT_TODO.md
    }

    /**
     * üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
     */
    suggestNextSteps(task, result) {
        if (result.nextAction) {
            return [`üéØ ${result.nextAction}`];
        }

        return [
            'üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            'üîÑ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ',
            'üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ TODO —Å–ø–∏—Å–∫–µ',
        ];
    }

    /**
     * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –¥–æ—Å—Ç—É–ø–∞
     */
    async checkSSHAccess() {
        // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSH
        return {
            success: false,
            error: 'Permission denied (publickey)',
            suggestion: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Yandex Cloud Console',
        };
    }

    /**
     * üìã –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ TODO —Å–ø–∏—Å–∫–∞
     */
    createBasicTodoList() {
        return {
            active: [
                {
                    id: 'check_server_status',
                    content: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ 46.21.247.218 –∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
                    progress: 70,
                    priority: 'high',
                    context: 'server',
                },
            ],
            completed: [
                {
                    id: 'security_100_percent_achieved',
                    content: 'üèÜ 100% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—â–∏—â—ë–Ω!',
                    progress: 100,
                    priority: 'critical',
                    context: 'security',
                },
            ],
            pending: [
                {
                    id: 'ssl_certificate_check',
                    content: 'üîí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                    progress: 0,
                    priority: 'normal',
                    context: 'security',
                },
            ],
        };
    }
}

module.exports = SimpleContinuationBot;
