#!/usr/bin/env node

/**
 * ü§Ø CONTEXT HANDOFF SYSTEM - Main Entry Point
 * –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ AI –∞–≥–µ–Ω—Ç–∞ –º–æ–±–∏–ª—å–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node context-handoff/index.js handoff
 * node context-handoff/index.js info
 * node context-handoff/index.js demo
 */

const HandoffCommand = require('./handoff-command');
const path = require('path');
const fs = require('fs').promises;

class ContextHandoffSystem {
    constructor() {
        this.handoffCommand = new HandoffCommand();
        this.version = '1.0.0-MVP';
        this.startTime = new Date();
    }

    /**
     * üöÄ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
     */
    async run() {
        const command = process.argv[2] || 'help';

        console.log(`ü§Ø CONTEXT HANDOFF SYSTEM v${this.version}`);
        console.log('==========================================');
        console.log('');

        try {
            switch (command.toLowerCase()) {
                case 'handoff':
                    return await this.executeHandoff();

                case 'info':
                    return await this.showInfo();

                case 'demo':
                    return await this.runDemo();

                case 'cleanup':
                    return await this.cleanup();

                case 'help':
                default:
                    return this.showHelp();
            }
        } catch (error) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
            return { success: false, error: error.message };
        }
    }

    /**
     * ü§Ø –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ handoff
     */
    async executeHandoff() {
        console.log('üéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ü–ï–†–ï–î–ê–ß–ò –ö–û–ù–¢–ï–ö–°–¢–ê');
        console.log('===================================');
        console.log('');

        const result = await this.handoffCommand.executeHandoff();

        if (result.success) {
            console.log('');
            console.log('üéâ HANDOFF –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!');
            console.log('==========================');
            console.log('');
            console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
            console.log(`   üìã TODO –∑–∞–¥–∞—á: ${result.stats.todosCount}`);
            console.log(`   üß† –ü–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞: ${result.stats.memoryItems} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            console.log(
                `   üì¶ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${Math.round(result.stats.contextSize / 1024)} KB`
            );
            console.log('');
            console.log('üì± –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
            console.log('   1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ');
            console.log('   2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
            console.log('   3. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É —Å –º–æ–±–∏–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º!');
            console.log('');
            console.log(`üì∑ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${result.qrCodePath}`);
            console.log(`‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç –≤: ${result.expiresAt.toLocaleString()}`);
            console.log('');
            console.log('üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: AES-256 —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ');

            await this.openQRCode(result.qrCodePath);
        } else {
            console.log('‚ùå –û–®–ò–ë–ö–ê HANDOFF:', result.error);
        }

        return result;
    }

    /**
     * üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
     */
    async showInfo() {
        console.log('üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï');
        console.log('=======================');
        console.log('');

        const info = await this.handoffCommand.getHandoffInfo();

        console.log('üñ•Ô∏è –°–ò–°–¢–ï–ú–ê:');
        console.log(`   –í–µ—Ä—Å–∏—è: ${info.system.version}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${info.system.status}`);
        console.log(`   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${info.system.capabilities.join(', ')}`);
        console.log('');

        if (info.stats) {
            console.log('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
            console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–µ handoff: ${info.stats.activeHandoffs}`);
            console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π: ${info.stats.lastGenerated}`);
            console.log(`   –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${info.stats.securityLevel}`);
            console.log('');
        }

        if (info.recent && info.recent.length > 0) {
            console.log('üìú –ù–ï–î–ê–í–ù–ò–ï HANDOFF:');
            info.recent.forEach((handoff, i) => {
                const date = new Date(handoff.date).toLocaleString();
                const status = handoff.success ? '‚úÖ' : '‚ùå';
                console.log(`   ${i + 1}. ${status} ${handoff.id} (${date})`);
            });
            console.log('');
        }

        return info;
    }

    /**
     * üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    async runDemo() {
        console.log('üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CONTEXT HANDOFF');
        console.log('===============================');
        console.log('');

        const demo = await this.handoffCommand.demoHandoff();

        console.log('üí° –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢:');
        console.log('');
        console.log('   üì± –í—ã: /handoff');
        console.log('   ü§ñ AI: üì¶ –°–æ–∑–¥–∞—é –ø–∞–∫–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...');
        console.log('         üì± QR –∫–æ–¥ –≥–æ—Ç–æ–≤!');
        console.log('');
        console.log('   üì± –í—ã: *—Å–∫–∞–Ω–∏—Ä—É–µ—Ç–µ QR –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ*');
        console.log('   ü§ñ Mobile Agent: ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω!');
        console.log('                    üß† –ü–æ–º–Ω—é –≤—Å—ë —á—Ç–æ –±—ã–ª–æ');
        console.log('                    üìã –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É');
        console.log('');
        console.log('   üì± –í—ã: –ø—Ä–æ–¥–æ–ª–∂–∞–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞');
        console.log('   ü§ñ Mobile Agent: üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é SSH –ø—Ä–æ–±–ª–µ–º—ã...');
        console.log('                    üí° –ù–∞—à—ë–ª —Ä–µ—à–µ–Ω–∏–µ!');
        console.log('');
        console.log('üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –†–ï–ê–õ–¨–ù–´–ô HANDOFF:');
        console.log('   node context-handoff/index.js handoff');
        console.log('');

        return demo;
    }

    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    async cleanup() {
        console.log('üßπ –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• HANDOFF');
        console.log('=========================');
        console.log('');

        const result = await this.handoffCommand.cleanupOldHandoffs();

        if (result.error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', result.error);
        } else {
            console.log('‚úÖ', result.message);
        }
        console.log('');

        return result;
    }

    /**
     * üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
     */
    showHelp() {
        console.log('üìñ –°–ü–†–ê–í–ö–ê –ü–û CONTEXT HANDOFF SYSTEM');
        console.log('=====================================');
        console.log('');
        console.log('üéØ –ö–û–ú–ê–ù–î–´:');
        console.log('   handoff   - ü§Ø –°–æ–∑–¥–∞—Ç—å handoff –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
        console.log('   info      - üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ');
        console.log('   demo      - üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞');
        console.log('   cleanup   - üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ handoff —Ñ–∞–π–ª—ã');
        console.log('   help      - üìñ –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
        console.log('');
        console.log('ü§Ø –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ò–î–ï–Ø:');
        console.log('   –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ AI –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
        console.log('   –ù–∏–∫–∞–∫–æ–π –ø–æ—Ç–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã');
        console.log('');
        console.log('üöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:');
        console.log('   1. node context-handoff/index.js handoff');
        console.log('   2. –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ');
        console.log('   3. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É —Å –º–æ–±–∏–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º!');
        console.log('');
        console.log('üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:');
        console.log('   - AES-256-GCM —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ');
        console.log('   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (15 –º–∏–Ω—É—Ç)');
        console.log('   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ');
        console.log('   - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º');
        console.log('');

        return {
            help: true,
            version: this.version,
            commands: ['handoff', 'info', 'demo', 'cleanup', 'help'],
        };
    }

    /**
     * üì∑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å QR –∫–æ–¥
     */
    async openQRCode(qrPath) {
        try {
            const os = require('os');
            const { exec } = require('child_process');

            let command;
            switch (os.platform()) {
                case 'darwin': // macOS
                    command = `open "${qrPath}"`;
                    break;
                case 'win32': // Windows
                    command = `start "${qrPath}"`;
                    break;
                case 'linux': // Linux
                    command = `xdg-open "${qrPath}"`;
                    break;
                default:
                    console.log(`üì∑ QR –∫–æ–¥: ${qrPath}`);
                    return;
            }

            exec(command, error => {
                if (error) {
                    console.log(`üì∑ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${qrPath}`);
                } else {
                    console.log('üì∑ QR –∫–æ–¥ –æ—Ç–∫—Ä—ã—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
                }
            });
        } catch (error) {
            console.log(`üì∑ QR –∫–æ–¥: ${qrPath}`);
        }
    }

    /**
     * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
     */
    getStartupStats() {
        return {
            version: this.version,
            startTime: this.startTime.toISOString(),
            platform: process.platform,
            nodeVersion: process.version,
            workingDir: process.cwd(),
        };
    }
}

// üöÄ –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const system = new ContextHandoffSystem();
    system
        .run()
        .then(result => {
            if (result && !result.success && result.error) {
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´:', error);
            process.exit(1);
        });
}

module.exports = ContextHandoffSystem;
