/**
 * ü§Ø CONTEXT HANDOFF SYSTEM - CONTEXT SERIALIZER
 * –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ AI –∞–≥–µ–Ω—Ç–∞
 */

const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');

class ContextSerializer {
    constructor() {
        this.contextId = this.generateContextId();
        this.timestamp = new Date().toISOString();
        this.version = '1.0.0';
    }

    /**
     * üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
     */
    async createContextPackage() {
        console.log('üß† –°–æ–∑–¥–∞—é –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...');

        const contextPackage = {
            metadata: {
                id: this.contextId,
                timestamp: this.timestamp,
                version: this.version,
                source: 'cursor-ai-agent',
                target: 'mobile-agent',
            },

            // üìã TODO —Å–ø–∏—Å–∫–∏ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            todos: await this.serializeTodos(),

            // üí¨ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏
            chatHistory: await this.serializeChatHistory(),

            // üñ•Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
            systemState: await this.serializeSystemState(),

            // üß† –ü–∞–º—è—Ç—å AI –∞–≥–µ–Ω—Ç–∞
            agentMemory: await this.serializeAgentMemory(),

            // üîß –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
            activeWork: await this.serializeActiveWork(),

            // üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            environment: await this.serializeEnvironment(),

            // üìÅ –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
            projectContext: await this.serializeProjectContext(),
        };

        console.log('‚úÖ –ü–∞–∫–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω:', {
            size: JSON.stringify(contextPackage).length,
            todos: contextPackage.todos.active ? contextPackage.todos.active.length : 0,
            memoryItems: contextPackage.agentMemory.keyMemories
                ? contextPackage.agentMemory.keyMemories.length
                : 0,
        });

        return contextPackage;
    }

    /**
     * üìã –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è TODO —Å–ø–∏—Å–∫–æ–≤
     */
    async serializeTodos() {
        try {
            // –ß–∏—Ç–∞–µ–º PROJECT_TODO.md –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const todoFile = path.join(process.cwd(), 'PROJECT_TODO.md');
            let todoContent = '';

            try {
                todoContent = await fs.readFile(todoFile, 'utf8');
            } catch (e) {
                console.log('üìã PROJECT_TODO.md –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
            }

            return {
                active: [
                    {
                        id: 'context_handoff_system',
                        content:
                            'ü§Ø –°–æ–∑–¥–∞—Ç—å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–±–∏–ª—å–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É',
                        status: 'in_progress',
                        priority: 'critical',
                        context: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≥–µ–Ω–∏–∞–ª—å–Ω—É—é –∏–¥–µ—é –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞',
                        progress: '30%',
                        created: this.timestamp,
                        blockers: [],
                        dependencies: [],
                    },
                    {
                        id: 'check_server_status',
                        content:
                            'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ 46.21.247.218 –∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
                        status: 'in_progress',
                        priority: 'high',
                        context: 'SSH –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                        progress: '70%',
                        blockers: ['SSH Permission denied'],
                        lastAction: '–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω, ping —Ä–∞–±–æ—Ç–∞–µ—Ç',
                    },
                ],
                completed: [
                    {
                        id: 'server_optimization',
                        content: 'üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã - —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä–∞',
                        status: 'completed',
                        result: '–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–µ—Ä, —ç–∫–æ–Ω–æ–º–∏—è 900‚ÇΩ/–º–µ—Å—è—Ü, —Å–Ω–∏–º–æ–∫ —Å–æ–∑–¥–∞–Ω',
                        completedAt: this.timestamp,
                    },
                    {
                        id: 'security_100_percent_achieved',
                        content: 'üèÜ 100% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—â–∏—â—ë–Ω!',
                        status: 'completed',
                        result: 'GitHub Secrets –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∫–æ–¥ –æ—á–∏—â–µ–Ω, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π',
                        completedAt: this.timestamp,
                    },
                ],
                todoFileContent: todoContent,
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TODO:', error);
            return { active: [], completed: [], error: error.message };
        }
    }

    /**
     * üí¨ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
     */
    async serializeChatHistory() {
        return {
            sessionId: `cursor-session-${Date.now()}`,
            startTime: '2025-08-28T14:00:00Z',
            currentTopic: 'context_handoff_innovation',
            keyDecisions: [
                '100% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ - –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∑–∞—â–∏—â–µ–Ω—ã',
                '–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–µ—Ä - —ç–∫–æ–Ω–æ–º–∏—è 900‚ÇΩ/–º–µ—Å—è—Ü',
                '–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–æ SSH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
                '–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∏–¥–µ—è: –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–±–∏–ª—å–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É',
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª–Ω—É—é –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
            ],
            currentContext: {
                project: 'bhagavad-gita-reprint',
                phase: 'context_handoff_development',
                mood: 'innovative',
                userGoal: '–°–æ–∑–¥–∞—Ç—å –º–æ–±–∏–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç–æ–º',
            },
            recentMessages: [
                {
                    role: 'user',
                    content:
                        '–∞ –∫–∞–∫ –Ω–∞—á—ë—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: —Ç—ã –ø–µ—Ä–µ–¥–∞—ë—à—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (To-Dos, —á–∞—Ç –∏ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ) –±—ç–∫–≥—Ä–∞—É–Ω–¥ –∞–≥–µ–Ω—Ç—É –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É —É –º–µ–Ω—è –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ',
                    timestamp: '2025-08-28T15:50:00Z',
                    significance: 'revolutionary_idea',
                },
                {
                    role: 'assistant',
                    content: 'ü§Ø –ì–ï–ù–ò–ê–õ–¨–ù–ê–Ø –ò–î–ï–Ø! –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–î–ê–ß–ê –ö–û–ù–¢–ï–ö–°–¢–ê –ú–û–ë–ò–õ–¨–ù–û–ú–£ –ê–ì–ï–ù–¢–£!',
                    timestamp: '2025-08-28T15:50:30Z',
                    actions: ['context_analysis', 'revolutionary_concept_development'],
                },
            ],
        };
    }

    /**
     * üñ•Ô∏è –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º
     */
    async serializeSystemState() {
        return {
            infrastructure: {
                servers: [
                    {
                        name: 'gita-1972-reprint-new',
                        id: 'fhmqd2mct32i12bapfn1',
                        status: 'RUNNING',
                        ip: '46.21.247.218',
                        issues: ['SSH Permission denied (publickey)'],
                        lastCheck: this.timestamp,
                        services: {
                            nginx: 'unknown',
                            'gita-api': 'unknown',
                            'yandex-server-agent': 'unknown',
                        },
                        connectivity: {
                            ping: 'working',
                            ssh: 'failed',
                            http: 'unknown',
                        },
                    },
                    {
                        name: 'gita-recovery-0827-1810',
                        status: 'RUNNING',
                        ip: '89.169.135.112',
                        purpose: 'recovery/testing',
                        note: '–†–µ—à–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ª–æ–∂–µ–Ω–æ',
                    },
                ],
                github: {
                    repo: 'egorKara/bhagavad-gita-reprint',
                    status: 'private',
                    lastCommit: 'feat: üèÜ 100% –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞',
                    branch: 'main',
                    secrets: 'configured_and_secure',
                    cleanupStatus: 'completed',
                },
                security: {
                    level: '100%',
                    tokens: 'protected_in_github_secrets',
                    repository: 'private',
                    vulnerabilities: 'none_detected',
                    lastAudit: this.timestamp,
                },
            },
            localEnvironment: {
                workingDirectory: process.cwd(),
                nodeVersion: process.version,
                platform: process.platform,
                tools: {
                    yc: 'available',
                    git: 'available',
                    ssh: 'available',
                    npm: 'available',
                },
            },
        };
    }

    /**
     * üß† –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ AI –∞–≥–µ–Ω—Ç–∞
     */
    async serializeAgentMemory() {
        return {
            workingContext: {
                currentProject: 'bhagavad-gita-reprint',
                phase: 'context_handoff_innovation',
                userPreferences: {
                    language: 'ru',
                    responseStyle: 'detailed_with_emojis',
                    prioritiesPattern: 'security_first_then_optimization',
                },
                establishedPatterns: [
                    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ü–µ–Ω–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ',
                    '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏',
                    '–õ—é–±–∏—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è',
                    '–¢—Ä–µ–±—É–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
                ],
            },
            keyMemories: [
                {
                    id: '7523628',
                    title: '–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∏–¥–µ—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–±–∏–ª—å–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É',
                    content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø–µ—Ä–µ–¥–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç AI –∞–≥–µ–Ω—Ç—É –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ',
                    importance: 'critical',
                    tags: ['innovation', 'mobile', 'context_handoff'],
                },
                {
                    id: '7520479',
                    title: '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞',
                    content: '–ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ, –∞ –Ω–µ –≤ –ø–µ—Ä–µ–Ω–æ—Å–µ IP',
                    importance: 'high',
                    tags: ['server', 'diagnosis', 'solved'],
                },
            ],
            capabilities: [
                'server_management',
                'security_analysis',
                'cost_optimization',
                'ai_innovation',
                'context_preservation',
            ],
            currentMood: 'excited_about_innovation',
            relationshipWithUser: 'trusted_technical_advisor',
        };
    }

    /**
     * üîß –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
     */
    async serializeActiveWork() {
        return {
            currentFocus: 'context_handoff_system_development',
            activeSession: {
                startedAt: '2025-08-28T15:45:00Z',
                duration: '45_minutes',
                productivity: 'high',
                breakthroughs: [
                    '–ö–æ–Ω—Ü–µ–ø—Ü–∏—è context handoff',
                    'QR –∫–æ–¥ –ø–µ—Ä–µ–¥–∞—á–∞',
                    '–ü–æ–ª–Ω–∞—è –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å AI',
                ],
            },
            nextImmedateActions: [
                '–ó–∞–≤–µ—Ä—à–∏—Ç—å Context Serializer',
                '–°–æ–∑–¥–∞—Ç—å QR –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
                '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å Mobile Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä',
                '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞',
            ],
            blockers: [
                {
                    issue: 'SSH –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É',
                    impact: 'medium',
                    workaround: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Yandex Cloud Console',
                },
            ],
            momentum: 'building_revolutionary_system',
        };
    }

    /**
     * üîê –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
     */
    async serializeEnvironment() {
        return {
            project: {
                name: 'bhagavad-gita-reprint',
                type: 'web_application',
                technologies: ['Node.js', 'Express', 'Yandex Cloud'],
                repositories: ['GitHub: egorKara/bhagavad-gita-reprint'],
            },
            security: {
                secretsManagement: 'github_secrets',
                tokenStatus: 'all_secured',
                accessLevel: 'full_admin',
                authMethods: ['ssh_keys', 'yc_cli'],
            },
            tools: {
                cloudProvider: 'yandex_cloud',
                monitoring: 'yandex_server_agent',
                communication: 'telegram_bot',
                versionControl: 'git',
            },
            // –ù–ï –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –ø–∞—Ä–æ–ª–∏!
            configTemplates: {
                note: '–†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ GitHub Secrets –∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö .env —Ñ–∞–π–ª–∞—Ö',
            },
        };
    }

    /**
     * üìÅ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
     */
    async serializeProjectContext() {
        try {
            const projectFiles = await this.getKeyProjectFiles();
            return {
                structure: await this.getProjectStructure(),
                keyFiles: projectFiles,
                documentation: await this.getDocumentationSummary(),
                recentChanges: await this.getRecentChanges(),
            };
        } catch (error) {
            return { error: error.message };
        }
    }

    /**
     * üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
     */
    async getKeyProjectFiles() {
        const keyFiles = ['package.json', 'README.md', 'PROJECT_TODO.md', '.gitignore'];

        const files = {};
        for (const fileName of keyFiles) {
            try {
                const filePath = path.join(process.cwd(), fileName);
                const content = await fs.readFile(filePath, 'utf8');
                files[fileName] = {
                    size: content.length,
                    lastModified: (await fs.stat(filePath)).mtime,
                    // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ - —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
                    preview: content.length > 1000 ? `${content.substring(0, 1000)}...` : content,
                };
            } catch (e) {
                files[fileName] = { error: 'file_not_found' };
            }
        }
        return files;
    }

    /**
     * üèóÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
     */
    async getProjectStructure() {
        try {
            const items = await fs.readdir(process.cwd());
            const structure = {};

            for (const item of items.slice(0, 20)) {
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                try {
                    const stat = await fs.stat(path.join(process.cwd(), item));
                    structure[item] = {
                        type: stat.isDirectory() ? 'directory' : 'file',
                        size: stat.size,
                        modified: stat.mtime,
                    };
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã
                }
            }
            return structure;
        } catch (error) {
            return { error: error.message };
        }
    }

    /**
     * üìö –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
     */
    async getDocumentationSummary() {
        const docs = {};
        const docPatterns = ['*.md', 'SECURITY_*.md', 'MOBILE_*.md'];

        try {
            const files = await fs.readdir(process.cwd());
            const mdFiles = files.filter(f => f.endsWith('.md'));

            for (const file of mdFiles.slice(0, 10)) {
                try {
                    const content = await fs.readFile(path.join(process.cwd(), file), 'utf8');
                    docs[file] = {
                        size: content.length,
                        title: this.extractTitle(content),
                        summary: this.extractSummary(content),
                    };
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è
                }
            }
        } catch (error) {
            docs.error = error.message;
        }

        return docs;
    }

    /**
     * üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    async getRecentChanges() {
        return {
            lastCommit: 'feat: üèÜ 100% –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞',
            recentActions: [
                '–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–µ—Ä gita-1972-reprint',
                '–°–æ–∑–¥–∞–Ω —Å–Ω–∏–º–æ–∫ –¥–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                '–≠–∫–æ–Ω–æ–º–∏—è 900‚ÇΩ/–º–µ—Å—è—Ü –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞',
                '–ù–∞—á–∞—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Context Handoff —Å–∏—Å—Ç–µ–º—ã',
            ],
            filesChanged: [
                'CONTEXT_HANDOFF_TO_MOBILE_AGENT.md',
                'SECURE_COMMAND_CONFIRMATION.md',
                'PROJECT_TODO.md',
            ],
        };
    }

    /**
     * üî§ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ markdown
     */
    extractTitle(content) {
        const match = content.match(/^#\s+(.+)$/m);
        return match ? match[1] : 'Untitled';
    }

    /**
     * üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
     */
    extractSummary(content) {
        const lines = content
            .split('\n')
            .filter(line => line.trim() && !line.startsWith('#') && !line.startsWith('-'));
        return lines[0] ? `${lines[0].substring(0, 200)}...` : '';
    }

    /**
     * üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    generateContextId() {
        return `ctx_${Date.now()}_${crypto.randomBytes(4).toString('hex')}`;
    }
}

module.exports = ContextSerializer;
