#!/usr/bin/env python3
"""
ü§ñ AI Log Analyzer - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YandexGPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""

import json
import re
import subprocess
import logging
import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import requests

class AILogAnalyzer:
    def __init__(self, config_path="agent-config.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ª–æ–≥–æ–≤"""
        self.config = self.load_config(config_path)
        self.setup_logging()
        
    def load_config(self, config_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if 'ai_integration' not in config:
                config['ai_integration'] = {
                    "enabled": True,
                    "yandexgpt_api_key": "YOUR_API_KEY_HERE",
                    "model": "yandexgpt-lite",
                    "max_tokens": 1000,
                    "temperature": 0.1,
                    "analyze_critical_only": True,
                    "auto_apply_safe_fixes": False
                }
                self.save_config(config, config_path)
                
            return config
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def save_config(self, config, config_path):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        log_dir = os.path.expanduser('~/logs') if os.path.exists(os.path.expanduser('~/gita-1972')) else './logs'
        os.makedirs(log_dir, exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(os.path.join(log_dir, 'ai-analyzer.log')),
                logging.StreamHandler()
            ]
        )
        
    def extract_critical_errors(self, hours=1) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏–∑ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
        critical_errors = []
        
        try:
            # –õ–æ–≥–∏ systemd –¥–ª—è gita-api
            cmd = f"journalctl -u gita-api -p err -S '{hours} hours ago' --no-pager"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.stdout:
                errors = self.parse_systemd_logs(result.stdout)
                critical_errors.extend(errors)
                
            # –õ–æ–≥–∏ Nginx
            cmd = f"sudo tail -n 100 /var/log/nginx/error.log"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.stdout:
                errors = self.parse_nginx_logs(result.stdout)
                critical_errors.extend(errors)
                
            # –õ–æ–≥–∏ –∞–≥–µ–Ω—Ç–∞
            cmd = f"tail -n 50 /home/yc-user/gita-1972/logs/server-agent.log | grep ERROR"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.stdout:
                errors = self.parse_agent_logs(result.stdout)
                critical_errors.extend(errors)
                
            self.log_info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(critical_errors)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
            return critical_errors
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return []
    
    def parse_systemd_logs(self, logs: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤ systemd"""
        errors = []
        for line in logs.split('\n'):
            if 'ERROR' in line or 'CRITICAL' in line or 'Failed' in line:
                errors.append({
                    'source': 'systemd/gita-api',
                    'timestamp': datetime.now().isoformat(),
                    'level': 'ERROR',
                    'message': line.strip(),
                    'category': 'service_failure'
                })
        return errors
    
    def parse_nginx_logs(self, logs: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤ Nginx"""
        errors = []
        for line in logs.split('\n'):
            if '[error]' in line or '[crit]' in line:
                errors.append({
                    'source': 'nginx',
                    'timestamp': datetime.now().isoformat(),
                    'level': 'ERROR',
                    'message': line.strip(),
                    'category': 'web_server_error'
                })
        return errors
    
    def parse_agent_logs(self, logs: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤ –∞–≥–µ–Ω—Ç–∞"""
        errors = []
        for line in logs.split('\n'):
            if 'ERROR' in line:
                errors.append({
                    'source': 'server-agent',
                    'timestamp': datetime.now().isoformat(),
                    'level': 'ERROR',
                    'message': line.strip(),
                    'category': 'agent_error'
                })
        return errors
    
    def analyze_with_yandexgpt(self, errors: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ —Å –ø–æ–º–æ—â—å—é YandexGPT"""
        if not self.config.get('ai_integration', {}).get('enabled', False):
            return {"status": "disabled", "analysis": "AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω"}
            
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è YandexGPT
            prompt = self.create_analysis_prompt(errors)
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT (—Ä–µ–∞–ª—å–Ω—ã–π API —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
            analysis = self.simulate_yandexgpt_analysis(errors)
            
            self.log_info("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return analysis
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {"status": "error", "error": str(e)}
    
    def create_analysis_prompt(self, errors: List[Dict]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
2. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
4. –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (1-10)
5. –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

–û—à–∏–±–∫–∏:
"""
        for error in errors[:5]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
            prompt += f"- {error['source']}: {error['message']}\n"
            
        return prompt
    
    def simulate_yandexgpt_analysis(self, errors: List[Dict]) -> Dict:
        """–°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ YandexGPT (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)"""
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        analysis = {
            "status": "success",
            "timestamp": datetime.now().isoformat(),
            "errors_analyzed": len(errors),
            "recommendations": [],
            "critical_level": 1,
            "auto_fixable": False
        }
        
        for error in errors:
            if 'gita-api' in error.get('source', ''):
                analysis["recommendations"].append({
                    "issue": "–ü—Ä–æ–±–ª–µ–º–∞ —Å API —Å–µ—Ä–≤–∏—Å–æ–º",
                    "solution": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js (npm install), –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å",
                    "auto_fix": "sudo systemctl restart gita-api",
                    "priority": "high"
                })
                analysis["critical_level"] = max(analysis["critical_level"], 8)
                analysis["auto_fixable"] = True
                
            elif 'ssl' in error.get('message', '').lower():
                analysis["recommendations"].append({
                    "issue": "–ü—Ä–æ–±–ª–µ–º–∞ —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º",
                    "solution": "–û–±–Ω–æ–≤–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å –ø–æ–º–æ—â—å—é certbot",
                    "auto_fix": "sudo certbot renew",
                    "priority": "medium"
                })
                analysis["critical_level"] = max(analysis["critical_level"], 6)
                
            elif 'nginx' in error.get('source', ''):
                analysis["recommendations"].append({
                    "issue": "–û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞",
                    "solution": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å",
                    "auto_fix": "sudo nginx -t && sudo systemctl restart nginx",
                    "priority": "high"
                })
                analysis["critical_level"] = max(analysis["critical_level"], 7)
                analysis["auto_fixable"] = True
        
        return analysis
    
    def apply_safe_fixes(self, analysis: Dict) -> Dict:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        if not self.config.get('ai_integration', {}).get('auto_apply_safe_fixes', False):
            return {"status": "disabled", "message": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"}
            
        if not analysis.get('auto_fixable', False):
            return {"status": "no_fixes", "message": "–ù–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"}
            
        applied_fixes = []
        
        try:
            for rec in analysis.get('recommendations', []):
                if rec.get('auto_fix') and rec.get('priority') in ['high', 'critical']:
                    cmd = rec['auto_fix']
                    self.log_info(f"üîß –ü—Ä–∏–º–µ–Ω—è—é –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {cmd}")
                    
                    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                    
                    applied_fixes.append({
                        "command": cmd,
                        "success": result.returncode == 0,
                        "output": result.stdout if result.returncode == 0 else result.stderr
                    })
                    
            return {"status": "success", "fixes_applied": len(applied_fixes), "details": applied_fixes}
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
            return {"status": "error", "error": str(e)}
    
    def generate_ai_report(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ AI –∞–Ω–∞–ª–∏–∑–∞"""
        report = f"""
ü§ñ AI –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –æ—à–∏–±–æ–∫: {analysis.get('errors_analyzed', 0)}
- –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: {analysis.get('critical_level', 0)}/10
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {'–î–æ—Å—Ç—É–ø–Ω—ã' if analysis.get('auto_fixable') else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}

üîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
"""
        
        for i, rec in enumerate(analysis.get('recommendations', []), 1):
            report += f"""
{i}. –ü–†–û–ë–õ–ï–ú–ê: {rec.get('issue', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
   –†–ï–®–ï–ù–ò–ï: {rec.get('solution', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}
   –ü–†–ò–û–†–ò–¢–ï–¢: {rec.get('priority', '—Å—Ä–µ–¥–Ω–∏–π').upper()}
   –ê–í–¢–û–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: {rec.get('auto_fix', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
"""
        
        return report
    
    def run_analysis(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ AI –∞–Ω–∞–ª–∏–∑–∞"""
        self.log_info("ü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤")
        
        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        errors = self.extract_critical_errors(hours=1)
        
        if not errors:
            self.log_info("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return {"status": "no_errors", "message": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ—Ç"}
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
        analysis = self.analyze_with_yandexgpt(errors)
        
        # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        fixes_result = self.apply_safe_fixes(analysis)
        
        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self.generate_ai_report(analysis)
        
        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = {
            "timestamp": datetime.now().isoformat(),
            "errors_found": len(errors),
            "analysis": analysis,
            "fixes_applied": fixes_result,
            "report": report
        }
        
        self.save_analysis_result(result)
        
        self.log_info("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return result
    
    def save_analysis_result(self, result: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            filename = f"/home/yc-user/gita-1972/logs/ai-analysis-{datetime.now().strftime('%Y%m%d-%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(result, f, indent=2, ensure_ascii=False)
                
            self.log_info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def log_info(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        logging.info(message)
        
    def log_error(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        logging.error(message)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = AILogAnalyzer()
    result = analyzer.run_analysis()
    
    print("ü§ñ AI –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –ó–ê–í–ï–†–®–ï–ù")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('status', 'unknown')}")
    
    if result.get('report'):
        print(result['report'])

if __name__ == "__main__":
    main()
