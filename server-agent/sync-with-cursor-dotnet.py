#!/usr/bin/env python3
"""
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è .NET –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–µ–∂–¥—É Cursor IDE –∏ Yandex Server Agent
–í–µ—Ä—Å–∏—è: 2.0.0 (.NET)
–î–∞—Ç–∞: 26 –∞–≤–≥—É—Å—Ç–∞ 2025
"""

import json
import os
import sys
import logging
import requests
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/gita-landing/sync-cursor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DotNetCursorSync:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è .NET –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å Cursor IDE"""
    
    def __init__(self):
        self.config_file = 'agent-config-dotnet.json'
        self.cursor_dir = '.cursor'
        self.sync_status_file = '.cursor/sync-status-dotnet.log'
        self.last_sync_file = '.cursor/last-sync-dotnet.json'
        
        # .NET —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.dotnet_files = [
            'GitaLanding.sln',
            'GitaLanding.API/GitaLanding.API.csproj',
            'GitaLanding.Data/GitaLanding.Data.csproj',
            'GitaLanding.API/Program.cs',
            'GitaLanding.API/appsettings.json'
        ]
        
        # –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
        self.agent_files = [
            'server-agent/agent-config-dotnet.json',
            'server-agent/yandex-server-agent.py',
            '.cursor/rules/agent-priorities.mdc'
        ]
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è .NET
        self.dotnet_docs = [
            'DOTNET_SETUP_INSTRUCTIONS.md',
            'PROJECT_TODO.md',
            'README.md',
            'CLEANUP_COMPLETE_REPORT.md'
        ]

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None

    def check_dotnet_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è .NET –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
            response = requests.get('http://localhost:5000/health', timeout=5)
            if response.status_code == 200:
                logger.info("‚úÖ .NET API –∑–¥–æ—Ä–æ–≤")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è .NET API –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå .NET API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False

    def check_dotnet_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .NET —Ñ–∞–π–ª–æ–≤"""
        missing_files = []
        for file_path in self.dotnet_files:
            if not os.path.exists(file_path):
                missing_files.append(file_path)
        
        if missing_files:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç .NET —Ñ–∞–π–ª—ã: {missing_files}")
            return False
        else:
            logger.info("‚úÖ –í—Å–µ .NET —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True

    def check_dotnet_runtime(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ .NET Runtime"""
        try:
            import subprocess
            result = subprocess.run(['dotnet', '--version'], 
                                 capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                version = result.stdout.strip()
                logger.info(f"‚úÖ .NET Runtime: {version}")
                return True
            else:
                logger.error("‚ùå .NET Runtime –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ .NET Runtime: {e}")
            return False

    def check_database_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
            import subprocess
            result = subprocess.run(['pg_isready', '-h', 'localhost'], 
                                 capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                logger.info("‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                logger.warning("‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å PostgreSQL: {e}")
            return False

    def sync_with_cursor(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Cursor IDE"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync_status = {
                'timestamp': datetime.now().isoformat(),
                'dotnet_health': self.check_dotnet_health(),
                'dotnet_files': self.check_dotnet_files(),
                'dotnet_runtime': self.check_dotnet_runtime(),
                'database': self.check_database_connection(),
                'agent_config': self.load_config() is not None
            }
            
            # –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞
            os.makedirs(os.path.dirname(self.sync_status_file), exist_ok=True)
            with open(self.sync_status_file, 'w', encoding='utf-8') as f:
                json.dump(sync_status, f, indent=2, ensure_ascii=False)
            
            # –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            with open(self.last_sync_file, 'w', encoding='utf-8') as f:
                json.dump({'last_sync': datetime.now().isoformat()}, f, indent=2)
            
            logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Cursor IDE –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return sync_status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return None

    def generate_status_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ"""
        config = self.load_config()
        if not config:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        
        report = f"""
# üìä –û–¢–ß–ï–¢ –û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò .NET –ê–†–•–ò–¢–ï–ö–¢–£–†–´

**–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')} MSK
**–ê–≥–µ–Ω—Ç:** {config.get('agent', {}).get('name', 'Unknown')}
**–í–µ—Ä—Å–∏—è:** {config.get('agent', {}).get('version', 'Unknown')}

## üèóÔ∏è .NET –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
- **Runtime:** {config.get('dotnet', {}).get('runtime_version', 'Unknown')}
- **API –ü—Ä–æ–µ–∫—Ç:** {config.get('dotnet', {}).get('api_project', 'Unknown')}
- **Data –ü—Ä–æ–µ–∫—Ç:** {config.get('dotnet', {}).get('data_project', 'Unknown')}
- **–ü–æ—Ä—Ç:** {config.get('dotnet', {}).get('port', 'Unknown')}

## üóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•
- **–¢–∏–ø:** {config.get('database', {}).get('type', 'Unknown')}
- **–ú–∏–≥—Ä–∞—Ü–∏–∏:** {'‚úÖ' if config.get('database', {}).get('migrations_enabled') else '‚ùå'}
- **Backup:** {'‚úÖ' if config.get('database', {}).get('backup_enabled') else '‚ùå'}

## üìÅ –§–ê–ô–õ–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
- **Solution:** {config.get('dotnet', {}).get('solution_file', 'Unknown')}
- **Publish Path:** {config.get('dotnet', {}).get('publish_path', 'Unknown')}

## üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
- **Cursor IDE:** {'‚úÖ' if config.get('sync', {}).get('cursor_ide', {}).get('enabled') else '‚ùå'}
- **GitHub:** {'‚úÖ' if config.get('sync', {}).get('github', {}).get('enabled') else '‚ùå'}
- **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {config.get('sync', {}).get('cursor_ide', {}).get('sync_interval', 'Unknown')}

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*
"""
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ .NET –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å Cursor IDE")
    
    syncer = DotNetCursorSync()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = syncer.load_config()
    if not config:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞")
        sys.exit(1)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    sync_status = syncer.sync_with_cursor()
    if sync_status:
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = syncer.generate_status_report()
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = '.cursor/sync-report-dotnet.md'
        os.makedirs(os.path.dirname(report_file), exist_ok=True)
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
    else:
        logger.error("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)

if __name__ == "__main__":
    main()