#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ü§ñ Yandex Server Agent
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 26 –∞–≤–≥—É—Å—Ç–∞ 2025
"""

import json
import os
import sys
import time
import subprocess
import logging
import requests
import schedule
from datetime import datetime, timedelta
from pathlib import Path
import shutil
import psutil

class YandexServerAgent:
    def __init__(self, config_path="agent-config.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.config_path = config_path
        self.config = self.load_config()
        self.setup_logging()
        self.last_sync = None
        self.status = "initializing"
        
        self.log_info("ü§ñ Yandex Server Agent –∑–∞–ø—É—â–µ–Ω")
        self.log_info(f"–í–µ—Ä—Å–∏—è: {self.config['agent']['version']}")
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)
            
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = os.path.dirname(self.config['logging']['log_file'])
        os.makedirs(log_dir, exist_ok=True)
        
        logging.basicConfig(
            level=getattr(logging, self.config['logging']['level']),
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(self.config['logging']['log_file']),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def log_info(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        self.logger.info(message)
        
    def log_warning(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        self.logger.warning(message)
        
    def log_error(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        self.logger.error(message)
        
    def run_command(self, command, timeout=30):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
            result = subprocess.run(
                command, 
                shell=True, 
                capture_output=True, 
                text=True, 
                timeout=timeout
            )
            return result.returncode == 0, result.stdout, result.stderr
        except subprocess.TimeoutExpired:
            self.log_error(f"–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç: {command}")
            return False, "", "Timeout"
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False, "", str(e)
            
    def check_api_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        api_url = self.config['services']['api']['check_url']
        timeout = self.config['monitoring']['alerts']['api_timeout']
        
        try:
            response = requests.get(api_url, timeout=timeout)
            if response.status_code == 200:
                self.log_info("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                self.log_warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
                return False
        except Exception as e:
            self.log_error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
            
    def check_systemd_services(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤"""
        services = [
            self.config['services']['api']['name'],
            self.config['services']['nginx']['name']
        ]
        
        all_ok = True
        for service in services:
            success, stdout, stderr = self.run_command(f"systemctl is-active {service}")
            if success and "active" in stdout:
                self.log_info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.log_error(f"‚ùå –°–µ—Ä–≤–∏—Å {service} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                all_ok = False
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                if self.config['automation']['auto_restart_services']:
                    self.restart_service(service)
                    
        return all_ok
        
    def restart_service(self, service_name):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        self.log_info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ {service_name}")
        success, stdout, stderr = self.run_command(f"sudo systemctl restart {service_name}")
        
        if success:
            self.log_info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            time.sleep(5)
            success, stdout, stderr = self.run_command(f"systemctl is-active {service_name}")
            if success:
                self.log_info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service_name} —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.log_error(f"‚ùå –°–µ—Ä–≤–∏—Å {service_name} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        else:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {stderr}")
            
    def check_system_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        alerts = self.config['monitoring']['alerts']
        issues = []
        
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        if cpu_percent > alerts['cpu_threshold']:
            issues.append(f"CPU: {cpu_percent}% (>{alerts['cpu_threshold']}%)")
            self.log_warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {cpu_percent}%")
        else:
            self.log_info(f"‚úÖ CPU: {cpu_percent}%")
            
        # Memory  
        memory = psutil.virtual_memory()
        if memory.percent > alerts['memory_threshold']:
            issues.append(f"RAM: {memory.percent}% (>{alerts['memory_threshold']}%)")
            self.log_warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%")
        else:
            self.log_info(f"‚úÖ Memory: {memory.percent}%")
            
        # Disk
        disk = psutil.disk_usage('/')
        if disk.percent > alerts['disk_threshold']:
            issues.append(f"–î–∏—Å–∫: {disk.percent}% (>{alerts['disk_threshold']}%)")
            self.log_warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk.percent}%")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
            if self.config['automation']['auto_cleanup_logs']:
                self.cleanup_old_logs()
        else:
            self.log_info(f"‚úÖ Disk: {disk.percent}%")
            
        return len(issues) == 0, issues
        
    def cleanup_old_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        self.log_info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤")
        
        # –û—á–∏—Å—Ç–∫–∞ nginx –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        success, stdout, stderr = self.run_command(
            "find /var/log/nginx/ -name '*.log.*' -mtime +30 -delete"
        )
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
        success, stdout, stderr = self.run_command(
            "journalctl --vacuum-time=30d"
        )
        
        self.log_info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    def check_ssl_certificates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
        cert_path = self.config['services']['certbot']['ssl_cert_path'] 
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        success, stdout, stderr = self.run_command(
            f"openssl x509 -in {cert_path}/cert.pem -noout -dates"
        )
        
        if success and "notAfter" in stdout:
            self.log_info("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
            success, stdout, stderr = self.run_command(
                f"openssl x509 -in {cert_path}/cert.pem -noout -checkend 604800"
            )
            
            if not success:
                self.log_warning("‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π")
                if self.config['automation']['auto_ssl_renewal']:
                    self.renew_ssl_certificate()
            
            return True
        else:
            self.log_error("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º")
            return False
            
    def renew_ssl_certificate(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
        self.log_info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
        success, stdout, stderr = self.run_command("sudo certbot renew --quiet")
        
        if success:
            self.log_info("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
            self.run_command("sudo systemctl reload nginx")
        else:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL: {stderr}")
            
    def sync_with_cursor(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Cursor IDE"""
        try:
            cursor_config = self.config['sync']['cursor_ide']
            if not cursor_config['enabled']:
                return
                
            self.log_info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Cursor IDE")
            
            # –ß–∏—Ç–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ Cursor
            priority_file = cursor_config['priority_file']
            if os.path.exists(priority_file):
                with open(priority_file, 'r', encoding='utf-8') as f:
                    priorities = f.read()
                    self.log_info("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã Cursor –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            status_file = cursor_config['status_file']
            os.makedirs(os.path.dirname(status_file), exist_ok=True)
            
            with open(status_file, 'a', encoding='utf-8') as f:
                f.write(f"Yandex Server Agent sync at {datetime.now()}\n")
                
            self.last_sync = datetime.now()
            self.log_info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Cursor –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Cursor: {e}")
            
    def sync_with_github(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub"""
        try:
            github_config = self.config['sync']['github']
            if not github_config['enabled']:
                return
                
            self.log_info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            project_path = self.config['server']['project_path']
            os.chdir(project_path)
            
            # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if github_config['auto_pull']:
                success, stdout, stderr = self.run_command("git pull --rebase --autostash")
                if success:
                    self.log_info("‚úÖ GitHub sync –∑–∞–≤–µ—Ä—à–µ–Ω")
                else:
                    self.log_error(f"‚ùå –û—à–∏–±–∫–∞ git pull: {stderr}")
                    
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub: {e}")
            
    def emergency_recovery(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        self.log_info("üö® –ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        emergency_script = self.config['sync']['local_agents']['emergency_script']
        script_path = os.path.join(self.config['server']['project_path'], emergency_script)
        
        if os.path.exists(script_path):
            success, stdout, stderr = self.run_command(f"bash {script_path}")
            if success:
                self.log_info("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            else:
                self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {stderr}")
        else:
            self.log_error(f"‚ùå –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            
    def perform_critical_checks(self):
        """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.log_info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
        
        issues = []
        
        # API
        if not self.check_api_availability():
            issues.append("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        # –°–µ—Ä–≤–∏—Å—ã
        if not self.check_systemd_services():
            issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏")
            
        # –†–µ—Å—É—Ä—Å—ã
        resources_ok, resource_issues = self.check_system_resources()
        if not resources_ok:
            issues.extend(resource_issues)
            
        # SSL
        if not self.check_ssl_certificates():
            issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å SSL")
            
        if issues:
            self.log_warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(issues)}")
            if self.config['automation']['emergency_recovery']:
                self.emergency_recovery()
        else:
            self.log_info("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
            
        return len(issues) == 0
        
    def generate_status_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        report = {
            "timestamp": datetime.now().isoformat(),
            "agent_status": self.status,
            "last_sync": self.last_sync.isoformat() if self.last_sync else None,
            "system": {
                "cpu": psutil.cpu_percent(interval=1),
                "memory": psutil.virtual_memory().percent,
                "disk": psutil.disk_usage('/').percent
            },
            "services": {},
            "ssl_status": "checking",
            "last_check": datetime.now().isoformat()
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        services = [
            self.config['services']['api']['name'],
            self.config['services']['nginx']['name']
        ]
        
        for service in services:
            success, stdout, stderr = self.run_command(f"systemctl is-active {service}")
            report["services"][service] = "active" if success else "inactive"
            
        return report
        
    def save_status_report(self, report):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        report_path = os.path.join(
            self.config['server']['project_path'], 
            'logs', 
            'agent-status.json'
        )
        
        os.makedirs(os.path.dirname(report_path), exist_ok=True)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
            
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        interval = self.config['monitoring']['interval_minutes']
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        schedule.every(interval).minutes.do(self.perform_critical_checks)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Cursor –∫–∞–∂–¥—ã–π —á–∞—Å
        schedule.every().hour.do(self.sync_with_cursor)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        schedule.every(30).minutes.do(self.sync_with_github)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        schedule.every(5).minutes.do(lambda: self.save_status_report(self.generate_status_report()))
        
        self.log_info(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ {interval} –º–∏–Ω—É—Ç)")
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞"""
        self.status = "running"
        self.setup_schedule()
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        self.perform_critical_checks()
        self.sync_with_cursor()
        
        self.log_info("üöÄ –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
        except KeyboardInterrupt:
            self.log_info("üõë –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.status = "stopped"
        except Exception as e:
            self.log_error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
            self.status = "error"

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        config_path = sys.argv[1]
    else:
        config_path = "agent-config.json"
        
    agent = YandexServerAgent(config_path)
    agent.run()

if __name__ == "__main__":
    main()
