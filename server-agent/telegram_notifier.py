#!/usr/bin/env python3
"""
üì± Telegram Notifier - —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
"""

import json
import logging
import requests
import subprocess
import os
from datetime import datetime
from typing import Dict, List, Optional
import time

class TelegramNotifier:
    def __init__(self, config_path="agent-config.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.config = self.load_config(config_path)
        self.setup_logging()
        
    def load_config(self, config_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if 'telegram' not in config:
                config['telegram'] = {
                    "enabled": True,
                    "bot_token": "YOUR_BOT_TOKEN_HERE",
                    "chat_ids": {
                        "admin": "YOUR_ADMIN_CHAT_ID",
                        "alerts": "YOUR_ALERTS_CHAT_ID",
                        "reports": "YOUR_REPORTS_CHAT_ID"
                    },
                    "notifications": {
                        "critical_alerts": True,
                        "daily_reports": True,
                        "weekly_summaries": True,
                        "maintenance_notifications": True
                    },
                    "interactive_commands": True,
                    "rate_limit": {
                        "max_messages_per_minute": 10,
                        "critical_override": True
                    }
                }
                self.save_config(config, config_path)
                
            return config
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def save_config(self, config, config_path):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        log_dir = os.path.expanduser('~/logs') if os.path.exists(os.path.expanduser('~/gita-1972')) else './logs'
        os.makedirs(log_dir, exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(os.path.join(log_dir, 'telegram-notifier.log')),
                logging.StreamHandler()
            ]
        )
    
    def send_message(self, text: str, chat_type: str = "admin", parse_mode: str = "Markdown") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.config.get('telegram', {}).get('enabled', False):
            self.log_info("üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
            
        try:
            bot_token = self.config['telegram']['bot_token']
            chat_id = self.config['telegram']['chat_ids'].get(chat_type)
            
            if not bot_token or bot_token == "YOUR_BOT_TOKEN_HERE":
                self.log_error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
                return False
                
            if not chat_id:
                self.log_error(f"‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω chat_id –¥–ª—è —Ç–∏–ø–∞: {chat_type}")
                return False
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode,
                "disable_web_page_preview": True
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                self.log_info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_type}")
                return True
            else:
                self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def send_critical_alert(self, alert_type: str, message: str, details: Dict = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        emoji_map = {
            "api_down": "üö®",
            "service_failed": "‚ö°",
            "ssl_expired": "üîí",
            "disk_full": "üíæ",
            "high_cpu": "üî•",
            "memory_leak": "üìà"
        }
        
        emoji = emoji_map.get(alert_type, "‚ö†Ô∏è")
        
        alert_text = f"""
{emoji} *–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢*

üéØ *–¢–∏–ø:* {alert_type.replace('_', ' ').title()}
‚è∞ *–í—Ä–µ–º—è:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* {message}

üîó *–°–µ—Ä–≤–µ—Ä:* Gita 1972 Reprint
üåê *IP:* 46.21.247.218
"""
        
        if details:
            alert_text += "\nüìä *–î–µ—Ç–∞–ª–∏:*\n"
            for key, value in details.items():
                alert_text += f"‚Ä¢ {key}: {value}\n"
        
        alert_text += "\nüîß *–î–µ–π—Å—Ç–≤–∏—è:* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!"
        
        return self.send_message(alert_text, "alerts")
    
    def send_daily_report(self, system_stats: Dict, service_status: Dict, recent_issues: List):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_text = f"""
üìä *–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢*
üìÖ {datetime.now().strftime('%Y-%m-%d')}

üñ•Ô∏è *–°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´:*
‚Ä¢ CPU: {system_stats.get('cpu', 'N/A')}%
‚Ä¢ RAM: {system_stats.get('memory', 'N/A')}%
‚Ä¢ –î–∏—Å–∫: {system_stats.get('disk', 'N/A')}%
‚Ä¢ Uptime: {system_stats.get('uptime', 'N/A')}

üîß *–°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í:*
"""
        
        for service, status in service_status.items():
            status_emoji = "‚úÖ" if status == "active" else "‚ùå"
            report_text += f"‚Ä¢ {service}: {status_emoji} {status}\n"
        
        if recent_issues:
            report_text += "\n‚ö†Ô∏è *–ü–†–û–ë–õ–ï–ú–´ –ó–ê 24 –ß–ê–°–ê:*\n"
            for issue in recent_issues[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–±–ª–µ–º
                report_text += f"‚Ä¢ {issue.get('time', 'N/A')}: {issue.get('description', 'N/A')}\n"
        else:
            report_text += "\n‚úÖ *–ü—Ä–æ–±–ª–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ*"
        
        report_text += f"""

üåê *–î–û–°–¢–£–ü–ù–û–°–¢–¨:*
‚Ä¢ API: https://api.gita-1972-reprint.ru/api/status
‚Ä¢ –°–∞–π—Ç: https://gita-1972-reprint.ru/

ü§ñ *Yandex Server Agent —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ*
"""
        
        return self.send_message(report_text, "reports")
    
    def send_maintenance_notification(self, maintenance_type: str, description: str, duration: str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏"""
        notification_text = f"""
üîß *–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï*

üéØ *–¢–∏–ø:* {maintenance_type}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}
‚è±Ô∏è *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {duration}
‚è∞ *–ù–∞—á–∞–ª–æ:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ Yandex Server Agent
üîÑ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
"""
        
        return self.send_message(notification_text, "admin")
    
    def process_command(self, command: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        if not self.config.get('telegram', {}).get('interactive_commands', False):
            return "‚ùå –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã"
        
        command = command.lower().strip()
        
        if command == "/status":
            return self.get_system_status()
        elif command == "/services":
            return self.get_services_status()
        elif command == "/logs":
            return self.get_recent_logs()
        elif command == "/restart_api":
            return self.restart_api_service()
        elif command == "/check_ssl":
            return self.check_ssl_status()
        elif command == "/help":
            return self.get_help_message()
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    
    def get_system_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # CPU
            cpu_cmd = "top -bn1 | grep 'Cpu(s)' | awk '{print $2}' | cut -d'%' -f1"
            cpu_result = subprocess.run(cpu_cmd, shell=True, capture_output=True, text=True)
            cpu = cpu_result.stdout.strip() if cpu_result.returncode == 0 else "N/A"
            
            # Memory
            mem_cmd = "free | grep Mem | awk '{printf \"%.1f\", $3/$2 * 100.0}'"
            mem_result = subprocess.run(mem_cmd, shell=True, capture_output=True, text=True)
            memory = mem_result.stdout.strip() if mem_result.returncode == 0 else "N/A"
            
            # Disk
            disk_cmd = "df -h / | awk 'NR==2{print $5}' | cut -d'%' -f1"
            disk_result = subprocess.run(disk_cmd, shell=True, capture_output=True, text=True)
            disk = disk_result.stdout.strip() if disk_result.returncode == 0 else "N/A"
            
            return f"""
üìä *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´*

üñ•Ô∏è *–†–µ—Å—É—Ä—Å—ã:*
‚Ä¢ CPU: {cpu}%
‚Ä¢ RAM: {memory}%
‚Ä¢ –î–∏—Å–∫: {disk}%

‚è∞ *–í—Ä–µ–º—è:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
ü§ñ *–ê–≥–µ–Ω—Ç:* –ê–∫—Ç–∏–≤–µ–Ω
"""
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}"
    
    def get_services_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            services = ["gita-api", "nginx", "yandex-server-agent"]
            status_text = "üîß *–°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í*\n\n"
            
            for service in services:
                cmd = f"systemctl is-active {service}"
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                status = result.stdout.strip()
                
                if status == "active":
                    emoji = "‚úÖ"
                elif status == "inactive":
                    emoji = "‚è∏Ô∏è"
                else:
                    emoji = "‚ùå"
                
                status_text += f"‚Ä¢ {service}: {emoji} {status}\n"
            
            return status_text
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}"
    
    def get_recent_logs(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"""
        try:
            cmd = "journalctl -u gita-api -n 5 --no-pager | tail -5"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0 and result.stdout:
                logs = result.stdout.strip()
                return f"üìã *–ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò:*\n\n```\n{logs}\n```"
            else:
                return "üìã –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"
    
    def restart_api_service(self) -> str:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            cmd = "sudo systemctl restart gita-api"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                time.sleep(2)
                status_cmd = "systemctl is-active gita-api"
                status_result = subprocess.run(status_cmd, shell=True, capture_output=True, text=True)
                status = status_result.stdout.strip()
                
                if status == "active":
                    return "‚úÖ API —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
                else:
                    return f"‚ö†Ô∏è API —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å: {status}"
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ API: {result.stderr}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}"
    
    def check_ssl_status(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ SSL"""
        try:
            cmd = "sudo certbot certificates | grep -A 2 'gita-1972-reprint.ru'"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0 and result.stdout:
                return f"üîí *SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢:*\n\n```\n{result.stdout.strip()}\n```"
            else:
                return "üîí –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SSL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL: {e}"
    
    def get_help_message(self) -> str:
        """–°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return """
ü§ñ *–ö–û–ú–ê–ù–î–´ YANDEX SERVER AGENT*

üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:*
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/services` - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ `/logs` - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
‚Ä¢ `/check_ssl` - —Å—Ç–∞—Ç—É—Å SSL

üîß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*
‚Ä¢ `/restart_api` - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ API

‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞:*
‚Ä¢ `/help` - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
    
    def log_info(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        logging.info(message)
        
    def log_error(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        logging.error(message)

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    notifier = TelegramNotifier()
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_message = f"""
üß™ *–¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô*

‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
ü§ñ Yandex Server Agent Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!

‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
    
    success = notifier.send_message(test_message, "admin")
    print(f"üì± –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")

if __name__ == "__main__":
    main()
