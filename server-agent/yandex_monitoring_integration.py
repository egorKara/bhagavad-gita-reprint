#!/usr/bin/env python3
"""
üìä Yandex Monitoring Integration - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Yandex Cloud
–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫, —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–æ–≤, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
"""

import json
import logging
import requests
import subprocess
import psutil
import os
from datetime import datetime, timezone
from typing import Dict, List, Optional
import time

class YandexMonitoringIntegration:
    def __init__(self, config_path="agent-config.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Yandex Monitoring"""
        self.config = self.load_config(config_path)
        self.setup_logging()
        
    def load_config(self, config_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Yandex Monitoring –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if 'yandex_monitoring' not in config:
                config['yandex_monitoring'] = {
                    "enabled": True,
                    "service_account_key": "YOUR_SERVICE_ACCOUNT_KEY",
                    "folder_id": "YOUR_FOLDER_ID",
                    "api_endpoint": "https://monitoring.api.cloud.yandex.net/monitoring/v2/data/write",
                    "metrics": {
                        "system_metrics": True,
                        "application_metrics": True,
                        "business_metrics": True,
                        "custom_metrics": True
                    },
                    "dashboards": {
                        "auto_create": True,
                        "update_interval": "1h"
                    },
                    "alerts": {
                        "enabled": True,
                        "notification_channels": ["telegram", "email"]
                    },
                    "retention_days": 30
                }
                self.save_config(config, config_path)
                
            return config
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def save_config(self, config, config_path):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        log_dir = os.path.expanduser('~/logs') if os.path.exists(os.path.expanduser('~/gita-1972')) else './logs'
        os.makedirs(log_dir, exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(os.path.join(log_dir, 'yandex-monitoring.log')),
                logging.StreamHandler()
            ]
        )
    
    def collect_system_metrics(self) -> Dict:
        """–°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            metrics = {
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "system": {
                    "cpu_percent": psutil.cpu_percent(interval=1),
                    "memory_percent": psutil.virtual_memory().percent,
                    "disk_percent": psutil.disk_usage('/').percent,
                    "load_average": psutil.getloadavg()[0],
                    "uptime_seconds": time.time() - psutil.boot_time(),
                    "network_io": {
                        "bytes_sent": psutil.net_io_counters().bytes_sent,
                        "bytes_recv": psutil.net_io_counters().bytes_recv,
                        "packets_sent": psutil.net_io_counters().packets_sent,
                        "packets_recv": psutil.net_io_counters().packets_recv
                    },
                    "disk_io": {
                        "read_bytes": psutil.disk_io_counters().read_bytes,
                        "write_bytes": psutil.disk_io_counters().write_bytes,
                        "read_count": psutil.disk_io_counters().read_count,
                        "write_count": psutil.disk_io_counters().write_count
                    }
                }
            }
            
            self.log_info("üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã")
            return metrics
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            return {}
    
    def collect_application_metrics(self) -> Dict:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        try:
            metrics = {
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "applications": {
                    "gita_api": self.get_api_metrics(),
                    "nginx": self.get_nginx_metrics(),
                    "agent": self.get_agent_metrics()
                }
            }
            
            self.log_info("üîß –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å–æ–±—Ä–∞–Ω—ã")
            return metrics
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")
            return {}
    
    def get_api_metrics(self) -> Dict:
        """–ú–µ—Ç—Ä–∏–∫–∏ API —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            api_url = "https://api.gita-1972-reprint.ru/api/status"
            start_time = time.time()
            
            try:
                response = requests.get(api_url, timeout=10)
                response_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                api_available = response.status_code == 200
                status_code = response.status_code
            except:
                response_time = 0
                api_available = False
                status_code = 0
            
            # –°—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤–∏—Å–∞
            service_cmd = "systemctl is-active gita-api"
            service_result = subprocess.run(service_cmd, shell=True, capture_output=True, text=True)
            service_active = service_result.stdout.strip() == "active"
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º Node.js
            try:
                memory_cmd = "ps aux | grep 'node.*server.js' | grep -v grep | awk '{print $6}'"
                memory_result = subprocess.run(memory_cmd, shell=True, capture_output=True, text=True)
                memory_usage_kb = int(memory_result.stdout.strip()) if memory_result.stdout.strip() else 0
            except:
                memory_usage_kb = 0
            
            return {
                "available": api_available,
                "response_time_ms": response_time,
                "status_code": status_code,
                "service_active": service_active,
                "memory_usage_kb": memory_usage_kb,
                "last_check": datetime.now(timezone.utc).isoformat()
            }
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ API: {e}")
            return {}
    
    def get_nginx_metrics(self) -> Dict:
        """–ú–µ—Ç—Ä–∏–∫–∏ Nginx"""
        try:
            # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
            service_cmd = "systemctl is-active nginx"
            service_result = subprocess.run(service_cmd, shell=True, capture_output=True, text=True)
            service_active = service_result.stdout.strip() == "active"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
            site_url = "https://gita-1972-reprint.ru/"
            start_time = time.time()
            
            try:
                response = requests.get(site_url, timeout=10)
                response_time = (time.time() - start_time) * 1000
                site_available = response.status_code == 200
                status_code = response.status_code
            except:
                response_time = 0
                site_available = False
                status_code = 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω nginx status)
            try:
                connections_cmd = "ss -tuln | grep ':80\\|:443' | wc -l"
                connections_result = subprocess.run(connections_cmd, shell=True, capture_output=True, text=True)
                active_connections = int(connections_result.stdout.strip()) if connections_result.stdout.strip() else 0
            except:
                active_connections = 0
            
            return {
                "service_active": service_active,
                "site_available": site_available,
                "response_time_ms": response_time,
                "status_code": status_code,
                "active_connections": active_connections,
                "last_check": datetime.now(timezone.utc).isoformat()
            }
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ Nginx: {e}")
            return {}
    
    def get_agent_metrics(self) -> Dict:
        """–ú–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
        try:
            # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –∞–≥–µ–Ω—Ç–∞
            service_cmd = "systemctl is-active yandex-server-agent"
            service_result = subprocess.run(service_cmd, shell=True, capture_output=True, text=True)
            service_active = service_result.stdout.strip() == "active"
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
            try:
                uptime_cmd = "systemctl show yandex-server-agent --property=ActiveEnterTimestamp | cut -d'=' -f2"
                uptime_result = subprocess.run(uptime_cmd, shell=True, capture_output=True, text=True)
                start_time_str = uptime_result.stdout.strip()
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å uptime, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                uptime_seconds = 0
            except:
                uptime_seconds = 0
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–æ–º
            try:
                memory_cmd = "ps aux | grep 'python3.*yandex-server-agent' | grep -v grep | awk '{print $6}'"
                memory_result = subprocess.run(memory_cmd, shell=True, capture_output=True, text=True)
                memory_usage_kb = int(memory_result.stdout.strip()) if memory_result.stdout.strip() else 0
            except:
                memory_usage_kb = 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (–º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∏–∑ –ª–æ–≥–æ–≤)
            checks_completed = self.count_completed_checks()
            
            return {
                "service_active": service_active,
                "uptime_seconds": uptime_seconds,
                "memory_usage_kb": memory_usage_kb,
                "checks_completed_today": checks_completed,
                "last_check": datetime.now(timezone.utc).isoformat()
            }
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–∞: {e}")
            return {}
    
    def count_completed_checks(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            log_cmd = f"grep '{today}.*–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫' /home/yc-user/gita-1972/logs/server-agent.log | wc -l"
            result = subprocess.run(log_cmd, shell=True, capture_output=True, text=True)
            return int(result.stdout.strip()) if result.stdout.strip() else 0
        except:
            return 0
    
    def collect_business_metrics(self) -> Dict:
        """–°–±–æ—Ä –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫"""
        try:
            metrics = {
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "business": {
                    "site_visits_today": self.estimate_site_visits(),
                    "api_requests_today": self.count_api_requests(),
                    "uptime_percentage_today": self.calculate_uptime_percentage(),
                    "ssl_certificate_days_remaining": self.get_ssl_days_remaining(),
                    "backup_status": self.get_backup_status(),
                    "security_score": self.calculate_security_score()
                }
            }
            
            self.log_info("üíº –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã")
            return metrics
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫: {e}")
            return {}
    
    def estimate_site_visits(self) -> int:
        """–û—Ü–µ–Ω–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π —Å–∞–π—Ç–∞ (–∏–∑ –ª–æ–≥–æ–≤ Nginx)"""
        try:
            today = datetime.now().strftime('%d/%b/%Y')
            cmd = f"grep '{today}' /var/log/nginx/access.log 2>/dev/null | wc -l"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            return int(result.stdout.strip()) if result.stdout.strip() else 0
        except:
            return 0
    
    def count_api_requests(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –¥–µ–Ω—å"""
        try:
            today = datetime.now().strftime('%d/%b/%Y')
            cmd = f"grep '{today}' /var/log/nginx/access.log 2>/dev/null | grep '/api/' | wc -l"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            return int(result.stdout.strip()) if result.stdout.strip() else 0
        except:
            return 0
    
    def calculate_uptime_percentage(self) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑–æ–º –ª–æ–≥–æ–≤
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏ —Å–∞–π—Ç–∞
            api_available = self.get_api_metrics()['available']
            site_available = self.get_nginx_metrics()['site_available']
            
            if api_available and site_available:
                return 100.0
            elif api_available or site_available:
                return 95.0
            else:
                return 90.0
        except:
            return 95.0
    
    def get_ssl_days_remaining(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
        try:
            cmd = "echo | openssl s_client -servername gita-1972-reprint.ru -connect gita-1972-reprint.ru:443 2>/dev/null | openssl x509 -noout -enddate | cut -d'=' -f2"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0 and result.stdout.strip():
                from datetime import datetime
                import ssl
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                return 30  # –ó–∞–≥–ª—É—à–∫–∞
            else:
                return 0
        except:
            return 0
    
    def get_backup_status(self) -> str:
        """–°—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            cmd = "find /home/yc-user/gita-1972/ -name '*.json' -mtime -1 | wc -l"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            recent_configs = int(result.stdout.strip()) if result.stdout.strip() else 0
            
            if recent_configs > 0:
                return "healthy"
            else:
                return "outdated"
        except:
            return "unknown"
    
    def calculate_security_score(self) -> int:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (1-100)"""
        score = 100
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL
            if self.get_ssl_days_remaining() < 7:
                score -= 20
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            cmd = "apt list --upgradable 2>/dev/null | grep -c upgradable"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            upgradable = int(result.stdout.strip()) if result.stdout.strip() else 0
            
            if upgradable > 10:
                score -= 15
            elif upgradable > 5:
                score -= 10
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
            if not self.get_api_metrics()['service_active']:
                score -= 25
            if not self.get_nginx_metrics()['service_active']:
                score -= 25
            
            return max(0, min(100, score))
            
        except:
            return 75  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def send_metrics_to_yandex(self, metrics: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –≤ Yandex Monitoring"""
        if not self.config.get('yandex_monitoring', {}).get('enabled', False):
            self.log_info("üìä Yandex Monitoring –æ—Ç–∫–ª—é—á–µ–Ω")
            return False
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è Yandex Monitoring API
            payload = self.format_metrics_for_yandex(metrics)
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–µ–Ω API –∫–ª—é—á)
            self.log_info("üì§ –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Yandex Monitoring (—Å–∏–º—É–ª—è—Ü–∏—è)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ
            self.save_metrics_locally(metrics)
            
            return True
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
            return False
    
    def format_metrics_for_yandex(self, metrics: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è Yandex Monitoring API"""
        # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è Yandex Monitoring
        formatted_metrics = {
            "ts": datetime.now(timezone.utc).isoformat(),
            "labels": {
                "project": "gita-1972-reprint",
                "server": "production",
                "agent": "yandex-server-agent"
            },
            "metrics": []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if 'system' in metrics:
            system = metrics['system']
            formatted_metrics["metrics"].extend([
                {"name": "cpu_percent", "value": system.get('cpu_percent', 0)},
                {"name": "memory_percent", "value": system.get('memory_percent', 0)},
                {"name": "disk_percent", "value": system.get('disk_percent', 0)},
                {"name": "load_average", "value": system.get('load_average', 0)}
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if 'applications' in metrics:
            apps = metrics['applications']
            if 'gita_api' in apps:
                api = apps['gita_api']
                formatted_metrics["metrics"].extend([
                    {"name": "api_available", "value": 1 if api.get('available') else 0},
                    {"name": "api_response_time", "value": api.get('response_time_ms', 0)}
                ])
        
        return formatted_metrics
    
    def save_metrics_locally(self, metrics: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ª–æ–∫–∞–ª—å–Ω–æ"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d-%H%M%S')
            filename = f"/home/yc-user/gita-1972/logs/metrics-{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(metrics, f, indent=2, ensure_ascii=False)
                
            self.log_info(f"üíæ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ: {filename}")
            
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    def run_metrics_collection(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
        self.log_info("üìä –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –º–µ—Ç—Ä–∏–∫
        system_metrics = self.collect_system_metrics()
        app_metrics = self.collect_application_metrics()
        business_metrics = self.collect_business_metrics()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
        all_metrics = {
            "collection_time": datetime.now(timezone.utc).isoformat(),
            **system_metrics,
            **app_metrics,
            **business_metrics
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Yandex Monitoring
        success = self.send_metrics_to_yandex(all_metrics)
        
        self.log_info(f"‚úÖ –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω {'—É—Å–ø–µ—à–Ω–æ' if success else '—Å –æ—à–∏–±–∫–∞–º–∏'}")
        
        return all_metrics
    
    def log_info(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        logging.info(message)
        
    def log_error(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        logging.error(message)

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
    monitoring = YandexMonitoringIntegration()
    metrics = monitoring.run_metrics_collection()
    
    print("üìä –°–ë–û–† –ú–ï–¢–†–ò–ö –ó–ê–í–ï–†–®–ï–ù")
    print(f"üìà –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {'‚úÖ' if 'system' in metrics else '‚ùå'}")
    print(f"üîß –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {'‚úÖ' if 'applications' in metrics else '‚ùå'}")
    print(f"üíº –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏: {'‚úÖ' if 'business' in metrics else '‚ùå'}")

if __name__ == "__main__":
    main()
