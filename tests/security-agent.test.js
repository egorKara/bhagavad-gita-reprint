const SecurityAgent = require('../src/services/security-agent');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
const createTestFiles = () => {
  const testDir = path.join(__dirname, 'test-files');
  
  if (!fs.existsSync(testDir)) {
    fs.mkdirSync(testDir, { recursive: true });
  }
  
  // –§–∞–π–ª —Å API –∫–ª—é—á–æ–º
  fs.writeFileSync(path.join(testDir, 'api-config.js'), `
module.exports = {
  openai: {
    apiKey: "sk-1234567890abcdef1234567890abcdef1234567890abcdef"
  },
  github: {
    token: "ghp_abcdef1234567890abcdef1234567890abcdef"
  }
};
`);
  
  // –§–∞–π–ª —Å –ø–∞—Ä–æ–ª–µ–º
  fs.writeFileSync(path.join(testDir, 'database.js'), `
const config = {
  host: 'localhost',
  port: 5432,
  database: 'myapp',
  username: 'admin',
  password: 'super_secret_password_123'
};
`);
  
  // –§–∞–π–ª —Å AWS –∫–ª—é—á–∞–º–∏
  fs.writeFileSync(path.join(testDir, 'aws-config.js'), `
const awsConfig = {
  accessKeyId: "AKIA1234567890ABCDEF",
  secretAccessKey: "abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890"
};
`);
  
  // –§–∞–π–ª –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
  fs.writeFileSync(path.join(testDir, 'safe-file.js'), `
const config = {
  port: 3000,
  debug: true,
  environment: 'development'
};
`);
  
  return testDir;
};

// –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
const cleanupTestFiles = (testDir) => {
  if (fs.existsSync(testDir)) {
    fs.rmSync(testDir, { recursive: true, force: true });
  }
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
describe('Cursor Security Agent Tests', () => {
  let agent;
  let testDir;
  
  beforeAll(() => {
    testDir = createTestFiles();
    agent = new SecurityAgent();
  });
  
  afterAll(() => {
    cleanupTestFiles(testDir);
  });
  
  test('–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω', () => {
    expect(agent).toBeDefined();
    expect(agent.secretsPatterns).toBeDefined();
    expect(agent.excludePatterns).toBeDefined();
  });
  
  test('–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å API –∫–ª—é—á–∏', async () => {
    const apiFile = path.join(testDir, 'api-config.js');
    const result = await agent.scanFile(apiFile);
    
    expect(result).toBeDefined();
    expect(result.findings).toBeDefined();
    expect(result.findings.length).toBeGreaterThan(0);
    
    const apiKeyFinding = result.findings.find(f => 
      f.pattern.toString().includes('api') || 
      f.matches.some(m => m.includes('sk-'))
    );
    
    expect(apiKeyFinding).toBeDefined();
  });
  
  test('–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏', async () => {
    const dbFile = path.join(testDir, 'database.js');
    const result = await agent.scanFile(dbFile);
    
    expect(result).toBeDefined();
    expect(result.findings).toBeDefined();
    
    const passwordFinding = result.findings.find(f => 
      f.pattern.toString().includes('password')
    );
    
    expect(passwordFinding).toBeDefined();
  });
  
  test('–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å AWS –∫–ª—é—á–∏', async () => {
    const awsFile = path.join(testDir, 'aws-config.js');
    const result = await agent.scanFile(awsFile);
    
    expect(result).toBeDefined();
    expect(result.findings).toBeDefined();
    
    const awsFinding = result.findings.find(f => 
      f.pattern.toString().includes('AKIA') ||
      f.matches.some(m => m.includes('AKIA'))
    );
    
    expect(awsFinding).toBeDefined();
  });
  
  test('–ê–≥–µ–Ω—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö', async () => {
    const safeFile = path.join(testDir, 'safe-file.js');
    const result = await agent.scanFile(safeFile);
    
    expect(result).toBeNull();
  });
  
  test('–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é', async () => {
    const results = await agent.scanDirectory(testDir, 1);
    
    expect(results).toBeDefined();
    expect(Array.isArray(results)).toBe(true);
    expect(results.length).toBeGreaterThan(0);
    
    // –î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ 3 —Ñ–∞–π–ª–∞ —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏
    const filesWithSecrets = results.filter(r => r !== null);
    expect(filesWithSecrets.length).toBe(3);
  });
  
  test('–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã', async () => {
    // –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä—É–µ–º
    const results = await agent.scanDirectory(testDir, 1);
    agent.scanResults = results.filter(r => r !== null);
    agent.lastScanTime = new Date();
    
    const report = await agent.generateReport();
    
    expect(report).toBeDefined();
    expect(report.timestamp).toBeDefined();
    expect(report.totalFiles).toBeGreaterThan(0);
    expect(report.details).toBeDefined();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    const reportPath = path.join(process.cwd(), 'security-scan-report.json');
    expect(fs.existsSync(reportPath)).toBe(true);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    if (fs.existsSync(reportPath)) {
      fs.unlinkSync(reportPath);
    }
  });
  
  test('–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è GitHub Secrets', async () => {
    const results = await agent.scanDirectory(testDir, 1);
    const validResults = results.filter(r => r !== null);
    
    await agent.createGitHubSecrets(validResults);
    
    const secretsFile = path.join(process.cwd(), 'github-secrets-to-create.md');
    expect(fs.existsSync(secretsFile)).toBe(true);
    
    const content = fs.readFileSync(secretsFile, 'utf8');
    expect(content).toContain('GitHub Secrets –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è');
    expect(content).toContain('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if (fs.existsSync(secretsFile)) {
      fs.unlinkSync(secretsFile);
    }
  });
  
  test('–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å', () => {
    const sshPattern = /-----BEGIN\s+(RSA|DSA|EC|OPENSSH)\s+PRIVATE\s+KEY-----/gi;
    const apiPattern = /api[_-]?key[_-]?[a-zA-Z0-9]*\s*[:=]\s*['"`]?[a-zA-Z0-9]{32,}['"`]?/gi;
    const passwordPattern = /password\s*[:=]\s*['"`]?[^'"`\s]+['"`]?/gi;
    
    expect(agent.calculateSeverity(sshPattern, ['test'])).toBe('CRITICAL');
    expect(agent.calculateSeverity(apiPattern, ['test'])).toBe('HIGH');
    expect(agent.calculateSeverity(passwordPattern, ['test'])).toBe('MEDIUM');
  });
  
  test('–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫', () => {
    const content = `line 1
line 2 with secret: sk-1234567890abcdef
line 3
line 4 with another secret: ghp_abcdef1234567890abcdef1234567890abcdef`;
    
    const matches = ['sk-1234567890abcdef', 'ghp_abcdef1234567890abcdef1234567890abcdef'];
    const lineNumbers = agent.findLineNumbers(content, matches);
    
    expect(lineNumbers).toContain(2);
    expect(lineNumbers).toContain(4);
  });
  
  test('–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–æ–º', () => {
    expect(agent.getStats().isRunning).toBe(false);
    expect(agent.getStats().isMonitoring).toBe(false);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    agent.monitoringInterval = setInterval(() => {}, 1000);
    expect(agent.getStats().isMonitoring).toBe(true);
    
    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    clearInterval(agent.monitoringInterval);
    agent.monitoringInterval = null;
  });
});

// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
describe('Performance Tests', () => {
  test('–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã', async () => {
    const agent = new SecurityAgent();
    
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const largeContent = 'const config = {\n'.repeat(1000) + 
                        '  apiKey: "sk-1234567890abcdef1234567890abcdef1234567890abcdef"\n' +
                        '};\n'.repeat(1000);
    
    const testFile = path.join(__dirname, 'large-test-file.js');
    fs.writeFileSync(testFile, largeContent);
    
    const startTime = Date.now();
    const result = await agent.scanFile(testFile);
    const scanTime = Date.now() - startTime;
    
    expect(result).toBeDefined();
    expect(scanTime).toBeLessThan(1000); // –î–æ–ª–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
    
    // –û—á–∏—â–∞–µ–º
    fs.unlinkSync(testFile);
  });
});

console.log('üß™ –¢–µ—Å—Ç—ã Cursor Security Agent –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø—É—Å–∫—É!');
console.log('–î–ª—è –∑–∞–ø—É—Å–∫–∞: npm test');
console.log('–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π: DEBUG=* npm test');