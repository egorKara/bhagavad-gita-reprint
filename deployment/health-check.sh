#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è Gita 1972
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö

LOG_FILE="/var/log/gita-health-check.log"
ALERT_EMAIL="admin@gita-1972-reprint.ru"
TELEGRAM_BOT_TOKEN=""  # –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_CHAT_ID=""    # –î–æ–±–∞–≤–∏—Ç—å ID —á–∞—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | sudo tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
send_alert() {
    local message="$1"
    local priority="$2"  # LOW, MEDIUM, HIGH, CRITICAL
    
    log "ALERT [$priority]: $message"
    
    # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if command -v mail &> /dev/null && [ -n "$ALERT_EMAIL" ]; then
        echo "$message" | mail -s "[$priority] Gita Server Alert" "$ALERT_EMAIL"
    fi
    
    # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="üö® [$priority] Gita Server Alert: $message"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
check_disk_space() {
    local usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    
    if [ "$usage" -gt 95 ]; then
        send_alert "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${usage}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ" "CRITICAL"
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        sudo find /tmp -type f -atime +1 -delete
        sudo journalctl --vacuum-size=100M
        return 1
    elif [ "$usage" -gt 85 ]; then
        send_alert "–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${usage}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ" "HIGH"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
check_memory() {
    local memory_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    
    if [ "$memory_usage" -gt 95 ]; then
        send_alert "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}%" "CRITICAL"
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ API –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        sudo systemctl restart gita-api
        return 1
    elif [ "$memory_usage" -gt 85 ]; then
        send_alert "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}%" "HIGH"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
check_cpu_load() {
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    local cpu_cores=$(nproc)
    local load_percent=$(echo "$load_avg * 100 / $cpu_cores" | bc -l | awk '{printf "%.0f", $1}')
    
    if [ "$load_percent" -gt 90 ]; then
        send_alert "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: ${load_percent}%" "CRITICAL"
        return 1
    elif [ "$load_percent" -gt 70 ]; then
        send_alert "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: ${load_percent}%" "MEDIUM"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx
check_nginx() {
    if ! systemctl is-active --quiet nginx; then
        send_alert "Nginx –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞..." "HIGH"
        sudo systemctl start nginx
        sleep 5
        
        if systemctl is-active --quiet nginx; then
            send_alert "Nginx —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω" "MEDIUM"
            return 0
        else
            send_alert "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Nginx!" "CRITICAL"
            return 1
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if ! sudo nginx -t &>/dev/null; then
        send_alert "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx!" "HIGH"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–∏—Å–∞
check_api_service() {
    if ! systemctl is-active --quiet gita-api; then
        send_alert "API —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞..." "HIGH"
        sudo systemctl start gita-api
        sleep 10
        
        if systemctl is-active --quiet gita-api; then
            send_alert "API —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω" "MEDIUM"
            return 0
        else
            send_alert "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–∏—Å!" "CRITICAL"
            return 1
        fi
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
check_api_endpoint() {
    local max_attempts=3
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s --max-time 10 http://localhost:3000/api/status >/dev/null; then
            return 0
        fi
        
        log "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts)"
        sleep 5
        ((attempt++))
    done
    
    send_alert "API endpoint –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫" "HIGH"
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ API
    sudo systemctl restart gita-api
    sleep 15
    
    if curl -s --max-time 10 http://localhost:3000/api/status >/dev/null; then
        send_alert "API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞" "MEDIUM"
        return 0
    else
        send_alert "API –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!" "CRITICAL"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    local ports=(80 443 3000)
    local failed_ports=()
    
    for port in "${ports[@]}"; do
        if ! ss -tulpn | grep -q ":$port "; then
            failed_ports+=($port)
        fi
    done
    
    if [ ${#failed_ports[@]} -gt 0 ]; then
        send_alert "–ü–æ—Ä—Ç—ã –Ω–µ —Å–ª—É—à–∞—é—Ç—Å—è: ${failed_ports[*]}" "HIGH"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
check_ssl_certificates() {
    local domains=("gita-1972-reprint.ru" "api.gita-1972-reprint.ru")
    
    for domain in "${domains[@]}"; do
        if command -v openssl &> /dev/null; then
            local expiry=$(echo | openssl s_client -servername $domain -connect $domain:443 2>/dev/null | 
                          openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2)
            
            if [ -n "$expiry" ]; then
                local expiry_epoch=$(date -d "$expiry" +%s 2>/dev/null)
                local current_epoch=$(date +%s)
                local days_left=$(( (expiry_epoch - current_epoch) / 86400 ))
                
                if [ "$days_left" -lt 7 ]; then
                    send_alert "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è $domain –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π!" "CRITICAL"
                elif [ "$days_left" -lt 30 ]; then
                    send_alert "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è $domain –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π" "HIGH"
                fi
            fi
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_error_logs() {
    local error_threshold=10
    
    # Nginx –æ—à–∏–±–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    local nginx_errors=$(grep "$(date -d '1 hour ago' '+%d/%b/%Y:%H')" /var/log/nginx/error.log 2>/dev/null | wc -l)
    if [ "$nginx_errors" -gt $error_threshold ]; then
        send_alert "–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ Nginx –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: $nginx_errors" "MEDIUM"
    fi
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏
    local system_errors=$(journalctl --since "1 hour ago" --priority=err --no-pager | wc -l)
    if [ "$system_errors" -gt $error_threshold ]; then
        send_alert "–ú–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: $system_errors" "MEDIUM"
    fi
    
    # API –æ—à–∏–±–∫–∏
    local api_errors=$(journalctl -u gita-api --since "1 hour ago" --priority=err --no-pager | wc -l)
    if [ "$api_errors" -gt 5 ]; then
        send_alert "–û—à–∏–±–∫–∏ API —Å–µ—Ä–≤–∏—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: $api_errors" "HIGH"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
check_performance() {
    # –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API
    local response_time=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:3000/api/status 2>/dev/null || echo "999")
    local response_ms=$(echo "$response_time * 1000" | bc | awk '{printf "%.0f", $1}')
    
    if [ "$response_ms" -gt 5000 ]; then
        send_alert "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ API: ${response_ms}ms" "MEDIUM"
    fi
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    local process_count=$(ps aux | wc -l)
    if [ "$process_count" -gt 200 ]; then
        send_alert "–ú–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $process_count" "LOW"
    fi
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
auto_recovery() {
    log "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    sudo find /tmp -type f -atime +1 -delete 2>/dev/null
    
    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –º–∞–ª–æ
    local disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ "$disk_usage" -gt 90 ]; then
        sudo journalctl --vacuum-time=3d
        sudo find /var/log -name "*.log" -type f -mtime +7 -delete
    fi
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
    if ! curl -s http://localhost:3000/api/status >/dev/null; then
        sudo systemctl restart gita-api nginx
        sleep 15
    fi
    
    log "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ
generate_health_report() {
    local report_file="/tmp/health-report-$(date +%Y%m%d-%H%M%S).txt"
    
    {
        echo "–û–¢–ß–ï–¢ –û –ó–î–û–†–û–í–¨–ï –°–ï–†–í–ï–†–ê GITA 1972"
        echo "================================="
        echo "–í—Ä–µ–º—è: $(date)"
        echo ""
        
        echo "–°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´:"
        echo "–î–∏—Å–∫: $(df -h / | tail -1)"
        echo "–ü–∞–º—è—Ç—å: $(free -h | grep Mem)"
        echo "CPU Load: $(uptime)"
        echo ""
        
        echo "–°–ï–†–í–ò–°–´:"
        systemctl is-active nginx && echo "‚úÖ Nginx: —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå Nginx: –ø—Ä–æ–±–ª–µ–º–∞"
        systemctl is-active gita-api && echo "‚úÖ API: —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå API: –ø—Ä–æ–±–ª–µ–º–∞"
        echo ""
        
        echo "–°–ï–¢–¨:"
        echo "–ü–æ—Ä—Ç—ã: $(ss -tulpn | grep LISTEN | wc -l) –∞–∫—Ç–∏–≤–Ω—ã—Ö"
        curl -s http://localhost:3000/api/status >/dev/null && echo "‚úÖ API endpoint: –æ—Ç–≤–µ—á–∞–µ—Ç" || echo "‚ùå API endpoint: –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        echo ""
        
        echo "–ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò:"
        journalctl --since "1 hour ago" --priority=err --no-pager | tail -5
        
    } > "$report_file"
    
    echo "$report_file"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
main_health_check() {
    log "=== –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã ==="
    
    local issues=0
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_disk_space || ((issues++))
    check_memory || ((issues++))
    check_cpu_load || ((issues++))
    check_nginx || ((issues++))
    check_api_service || ((issues++))
    check_api_endpoint || ((issues++))
    check_ports || ((issues++))
    check_ssl_certificates || ((issues++))
    check_error_logs || ((issues++))
    check_performance || ((issues++))
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    if [ $issues -gt 0 ]; then
        log "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: $issues. –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
        auto_recovery
    else
        log "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ ‚úÖ"
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    local report=$(generate_health_report)
    log "–û—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ: $report"
    
    log "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ==="
    
    return $issues
}

# –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞
daemon_mode() {
    log "–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞. PID: $$"
    
    while true; do
        main_health_check
        sleep 300  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    done
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-check}" in
    "check")
        main_health_check
        ;;
    "daemon")
        daemon_mode
        ;;
    "report")
        generate_health_report
        ;;
    "test-alert")
        send_alert "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞" "LOW"
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [check|daemon|report|test-alert]"
        echo ""
        echo "  check      - –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  daemon     - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        echo "  report     - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ"
        echo "  test-alert - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        exit 1
        ;;
esac
