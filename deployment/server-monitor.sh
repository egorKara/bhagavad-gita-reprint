#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Gita 1972
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_status() {
    if [ "$2" = "OK" ]; then
        echo -e "${GREEN}‚úÖ $1: $2${NC}"
    elif [ "$2" = "WARNING" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $1: $2${NC}"
    else
        echo -e "${RED}‚ùå $1: $2${NC}"
    fi
}

echo -e "${BLUE}üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ï–†–í–ï–†–ê GITA 1972${NC}"
echo -e "${BLUE}===============================${NC}"
echo "–í—Ä–µ–º—è: $(date)"
echo ""

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
echo -e "${BLUE}üíæ –î–ò–°–ö–û–í–û–ï –ü–†–û–°–¢–†–ê–ù–°–¢–í–û:${NC}"
df -h / | tail -1 | while read filesystem size used avail percent mount; do
    usage_num=$(echo $percent | sed 's/%//')
    if [ "$usage_num" -gt 90 ]; then
        print_status "–î–∏—Å–∫ /" "CRITICAL - $percent –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
    elif [ "$usage_num" -gt 80 ]; then
        print_status "–î–∏—Å–∫ /" "WARNING - $percent –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
    else
        print_status "–î–∏—Å–∫ /" "OK - $percent –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
    fi
done

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
echo ""
echo -e "${BLUE}üß† –ü–ê–ú–Ø–¢–¨:${NC}"
memory_info=$(free | grep Mem)
total=$(echo $memory_info | awk '{print $2}')
used=$(echo $memory_info | awk '{print $3}')
available=$(echo $memory_info | awk '{print $7}')
usage_percent=$((used * 100 / total))

if [ "$usage_percent" -gt 90 ]; then
    print_status "RAM" "CRITICAL - ${usage_percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
elif [ "$usage_percent" -gt 80 ]; then
    print_status "RAM" "WARNING - ${usage_percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
else
    print_status "RAM" "OK - ${usage_percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
echo ""
echo -e "${BLUE}‚öôÔ∏è  CPU:${NC}"
load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
cpu_cores=$(nproc)
load_percent=$(echo "$load_avg * 100 / $cpu_cores" | bc -l | awk '{printf "%.0f", $1}')

if [ "$load_percent" -gt 90 ]; then
    print_status "CPU Load" "CRITICAL - ${load_percent}%"
elif [ "$load_percent" -gt 70 ]; then
    print_status "CPU Load" "WARNING - ${load_percent}%"
else
    print_status "CPU Load" "OK - ${load_percent}%"
fi

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo -e "${BLUE}üîß –°–ï–†–í–ò–°–´:${NC}"

# Nginx
if systemctl is-active --quiet nginx; then
    print_status "Nginx" "OK - –ó–∞–ø—É—â–µ–Ω"
else
    print_status "Nginx" "CRITICAL - –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# SSH
if systemctl is-active --quiet ssh; then
    print_status "SSH" "OK - –ó–∞–ø—É—â–µ–Ω"
else
    print_status "SSH" "CRITICAL - –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# Gita API
if systemctl list-unit-files | grep -q "gita-api" && systemctl is-active --quiet gita-api; then
    print_status "Gita API" "OK - –ó–∞–ø—É—â–µ–Ω"
elif systemctl list-unit-files | grep -q "gita-api"; then
    print_status "Gita API" "CRITICAL - –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    print_status "Gita API" "WARNING - –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# UFW Firewall
if command -v ufw &> /dev/null && ufw status | grep -q "Status: active"; then
    print_status "UFW Firewall" "OK - –ê–∫—Ç–∏–≤–µ–Ω"
else
    print_status "UFW Firewall" "WARNING - –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo ""
echo -e "${BLUE}üåê –°–ï–¢–ï–í–´–ï –ü–û–†–¢–´:${NC}"

# –ü–æ—Ä—Ç 80 (HTTP)
if ss -tulpn | grep -q ":80 "; then
    print_status "–ü–æ—Ä—Ç 80 (HTTP)" "OK - –°–ª—É—à–∞–µ—Ç—Å—è"
else
    print_status "–ü–æ—Ä—Ç 80 (HTTP)" "WARNING - –ù–µ —Å–ª—É—à–∞–µ—Ç—Å—è"
fi

# –ü–æ—Ä—Ç 443 (HTTPS)
if ss -tulpn | grep -q ":443 "; then
    print_status "–ü–æ—Ä—Ç 443 (HTTPS)" "OK - –°–ª—É—à–∞–µ—Ç—Å—è"
else
    print_status "–ü–æ—Ä—Ç 443 (HTTPS)" "WARNING - –ù–µ —Å–ª—É—à–∞–µ—Ç—Å—è"
fi

# –ü–æ—Ä—Ç 3000 (API)
if ss -tulpn | grep -q ":3000 "; then
    print_status "–ü–æ—Ä—Ç 3000 (API)" "OK - –°–ª—É—à–∞–µ—Ç—Å—è"
else
    print_status "–ü–æ—Ä—Ç 3000 (API)" "CRITICAL - –ù–µ —Å–ª—É—à–∞–µ—Ç—Å—è"
fi

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
echo ""
echo -e "${BLUE}üîí SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢–´:${NC}"

check_ssl_cert() {
    domain=$1
    if command -v openssl &> /dev/null; then
        expiry=$(echo | openssl s_client -servername $domain -connect $domain:443 2>/dev/null | openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2)
        if [ -n "$expiry" ]; then
            expiry_epoch=$(date -d "$expiry" +%s 2>/dev/null)
            current_epoch=$(date +%s)
            days_left=$(( (expiry_epoch - current_epoch) / 86400 ))
            
            if [ "$days_left" -lt 7 ]; then
                print_status "$domain SSL" "CRITICAL - –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π"
            elif [ "$days_left" -lt 30 ]; then
                print_status "$domain SSL" "WARNING - –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π"
            else
                print_status "$domain SSL" "OK - –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω $days_left –¥–Ω–µ–π"
            fi
        else
            print_status "$domain SSL" "ERROR - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
        fi
    else
        print_status "SSL –ø—Ä–æ–≤–µ—Ä–∫–∞" "WARNING - openssl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
check_ssl_cert "gita-1972-reprint.ru"
check_ssl_cert "api.gita-1972-reprint.ru"

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
echo ""
echo -e "${BLUE}üìù –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í:${NC}"

# Nginx –æ—à–∏–±–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
nginx_errors=$(grep "$(date -d '1 hour ago' '+%d/%b/%Y:%H')" /var/log/nginx/error.log 2>/dev/null | wc -l)
if [ "$nginx_errors" -gt 10 ]; then
    print_status "Nginx –æ—à–∏–±–∫–∏" "WARNING - $nginx_errors –∑–∞ —á–∞—Å"
elif [ "$nginx_errors" -gt 0 ]; then
    print_status "Nginx –æ—à–∏–±–∫–∏" "OK - $nginx_errors –∑–∞ —á–∞—Å"
else
    print_status "Nginx –æ—à–∏–±–∫–∏" "OK - –Ω–µ—Ç –æ—à–∏–±–æ–∫"
fi

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏
system_errors=$(journalctl --since "1 hour ago" --priority=err --no-pager | wc -l)
if [ "$system_errors" -gt 5 ]; then
    print_status "–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏" "WARNING - $system_errors –∑–∞ —á–∞—Å"
elif [ "$system_errors" -gt 0 ]; then
    print_status "–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏" "OK - $system_errors –∑–∞ —á–∞—Å"
else
    print_status "–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏" "OK - –Ω–µ—Ç –æ—à–∏–±–æ–∫"
fi

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
echo ""
echo -e "${BLUE}üì¶ –û–ë–ù–û–í–õ–ï–ù–ò–Ø:${NC}"
if command -v apt &> /dev/null; then
    apt list --upgradable 2>/dev/null | grep -c upgradable | head -1 | while read updates; do
        if [ "$updates" -gt 10 ]; then
            print_status "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" "WARNING - $updates –ø–∞–∫–µ—Ç–æ–≤"
        elif [ "$updates" -gt 0 ]; then
            print_status "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" "OK - $updates –ø–∞–∫–µ—Ç–æ–≤"
        else
            print_status "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" "OK - —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        fi
    done
fi

# 9. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
echo ""
echo -e "${BLUE}üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:${NC}"

# –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–±–ª–µ–º
critical_issues=0
warnings=0

# –ü–æ–¥—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
echo "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω."
echo ""

echo -e "${BLUE}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:${NC}"
echo "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–∏—Å—Ç–µ–º—É: sudo apt update && sudo apt upgrade"
echo "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: df -h"
echo "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏: journalctl -xe"
echo "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"
echo "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
echo ""

echo -e "${GREEN}‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!${NC}"
