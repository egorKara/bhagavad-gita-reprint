#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ Telegram
–†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
"""

import requests
import time
import subprocess
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8319867749:AAFOq66KNx85smfgtrvFsoBc-KABOPbcX0s"
CHAT_ID = "6878699213"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

class SimpleTelegramHandler:
    def __init__(self):
        self.last_update_id = 0
        print(f"ü§ñ –ü—Ä–æ—Å—Ç–æ–π Telegram Handler –∑–∞–ø—É—â–µ–Ω")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
        
    def send_message(self, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            url = f"{TELEGRAM_API_URL}/sendMessage"
            response = requests.post(url, json={
                'chat_id': CHAT_ID,
                'text': text
            }, timeout=10)
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    def get_system_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # CPU
            cpu_cmd = "top -bn1 | grep 'Cpu(s)' | awk '{print $2}' | cut -d'%' -f1"
            cpu = subprocess.run(cpu_cmd, shell=True, capture_output=True, text=True)
            cpu_usage = cpu.stdout.strip() if cpu.returncode == 0 else "N/A"
            
            # Memory
            mem_cmd = "free | grep Mem | awk '{printf \"%.1f\", $3/$2 * 100.0}'"
            mem = subprocess.run(mem_cmd, shell=True, capture_output=True, text=True)
            mem_usage = mem.stdout.strip() if mem.returncode == 0 else "N/A"
            
            # Disk
            disk_cmd = "df -h / | awk 'NR==2{print $5}' | cut -d'%' -f1"
            disk = subprocess.run(disk_cmd, shell=True, capture_output=True, text=True)
            disk_usage = disk.stdout.strip() if disk.returncode == 0 else "N/A"
            
            # Uptime
            uptime_cmd = "uptime -p"
            uptime = subprocess.run(uptime_cmd, shell=True, capture_output=True, text=True)
            uptime_str = uptime.stdout.strip() if uptime.returncode == 0 else "N/A"
            
            return f"""üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´

üñ•Ô∏è –†–µ—Å—É—Ä—Å—ã:
‚Ä¢ CPU: {cpu_usage}%
‚Ä¢ Memory: {mem_usage}%  
‚Ä¢ Disk: {disk_usage}%
‚Ä¢ Uptime: {uptime_str}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
ü§ñ Handler: –†–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ
‚úÖ Telegram: –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è"""
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}"
    
    def get_services_status(self):
        """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            services = ['yandex-server-agent', 'nginx', 'gita-api']
            status_text = "üîß –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í\n\n"
            
            for service in services:
                cmd = f"systemctl is-active {service}"
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if result.stdout.strip() == "active" else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                status_text += f"‚Ä¢ {service}: {status}\n"
            
            status_text += f"\n‚è∞ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            return status_text
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}"
    
    def get_help(self):
        """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"""
        return """ü§ñ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:

/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (CPU, RAM, –¥–∏—Å–∫)
/services - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
/help - –≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏

üîß –ü—Ä–æ—Å—Ç–æ–π Handler:
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
‚Ä¢ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API

‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω–æ 10-20 —Å–µ–∫—É–Ω–¥"""
    
    def process_command(self, command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        command = command.lower().strip()
        
        if command == "/status":
            return self.get_system_status()
        elif command == "/services":
            return self.get_services_status()
        elif command == "/help":
            return self.get_help()
        elif command == "/ping":
            return f"üèì Pong! –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    
    def check_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            url = f"{TELEGRAM_API_URL}/getUpdates"
            params = {
                'offset': self.last_update_id + 1,
                'timeout': 1,
                'limit': 10
            }
            
            response = requests.get(url, params=params, timeout=5)
            
            if response.status_code != 200:
                return False
                
            data = response.json()
            
            if not data.get('ok', False):
                return False
                
            updates = data.get('result', [])
            
            if not updates:
                return False
            
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            
            for update in updates:
                self.last_update_id = update['update_id']
                
                if 'message' not in update:
                    continue
                    
                message = update['message']
                chat_id = str(message['chat']['id'])
                
                if chat_id != CHAT_ID:
                    continue
                    
                if 'text' not in message:
                    continue
                    
                command_text = message['text'].strip()
                
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_date = message.get('date', 0)
                current_time = int(time.time())
                if current_time - message_date > 300:  # 5 –º–∏–Ω—É—Ç
                    continue
                
                if command_text.startswith('/'):
                    print(f"üì± –ö–æ–º–∞–Ω–¥–∞: {command_text} –æ—Ç {chat_id}")
                    response_text = self.process_command(command_text)
                    
                    if self.send_message(response_text):
                        print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
                        
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        start_msg = f"""ü§ñ –ü–†–û–°–¢–û–ô TELEGRAM HANDLER –ó–ê–ü–£–©–ï–ù!

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥: –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /status, /services, /help, /ping

–≠—Ç–æ—Ç handler —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã!"""
        
        self.send_message(start_msg)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        try:
            while True:
                print(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ {datetime.now().strftime('%H:%M:%S')}")
                self.check_updates()
                time.sleep(10)
                
        except KeyboardInterrupt:
            print("üõë Handler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    handler = SimpleTelegramHandler()
    handler.run()
