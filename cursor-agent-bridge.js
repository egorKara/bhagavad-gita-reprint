#!/usr/bin/env node

/**
 * Cursor IDE Agent Bridge
 * –õ–æ–∫–∞–ª—å–Ω—ã–π –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ Yandex Server Agent –∫ Cursor IDE
 */

import http from 'http';
import https from 'https';
import { URL } from 'url';

const REMOTE_AGENT_URL = 'http://46.21.247.218:3001/agent';
const LOCAL_PORT = 8080;

// –°–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(async (req, res) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);

    // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    try {
        // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —É–¥–∞–ª—ë–Ω–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
        const targetUrl = new URL(req.url, REMOTE_AGENT_URL);

        const options = {
            method: req.method,
            headers: {
                ...req.headers,
                host: targetUrl.host,
            },
        };

        const proxyReq = http.request(targetUrl, options, proxyRes => {
            // –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            res.writeHead(proxyRes.statusCode, proxyRes.headers);

            // –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ
            proxyRes.pipe(res);
        });

        proxyReq.on('error', err => {
            console.error('Proxy error:', err);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(
                JSON.stringify({
                    error: 'Agent connection failed',
                    details: err.message,
                    remoteUrl: REMOTE_AGENT_URL,
                })
            );
        });

        // –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        req.pipe(proxyReq);
    } catch (err) {
        console.error('Request error:', err);
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(
            JSON.stringify({
                error: 'Internal server error',
                details: err.message,
            })
        );
    }
});

server.listen(LOCAL_PORT, 'localhost', () => {
    console.log(`üåâ Cursor Agent Bridge –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${LOCAL_PORT}`);
    console.log(`üîó –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫: ${REMOTE_AGENT_URL}`);
    console.log(`üìù –î–ª—è Cursor IDE –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL: http://localhost:${LOCAL_PORT}`);
});

server.on('error', err => {
    console.error('Server error:', err);
    process.exit(1);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Cursor Agent Bridge...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});
