name: Cleanup Actions queue

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: read

concurrency:
  group: cleanup-actions-queue
  cancel-in-progress: true

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel/Delete queued and in_progress runs of self-hosted workflow
        id: sweep
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const workflow_id = 'deploy.yml';
            const activeStatuses = ['queued', 'in_progress'];
            let canceled = 0, deleted = 0, failed = 0;
            for (const status of activeStatuses) {
              for (let page = 1; page <= 20; page++) {
                const { data } = await github.rest.actions.listWorkflowRuns({
                  owner,
                  repo,
                  workflow_id,
                  status,
                  per_page: 100,
                  page
                });
                const runs = data.workflow_runs || [];
                if (runs.length === 0) break;
                for (const run of runs) {
                  try {
                    if (status === 'queued') {
                      await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                      deleted++;
                    } else {
                      await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id: run.id });
                      canceled++;
                    }
                  } catch (e) {
                    failed++;
                  }
                }
                if (runs.length < 100) break;
              }
            }

            // Sweep completed with conclusion cancelled/skipped/stale
            const conclusions = ['cancelled', 'skipped', 'stale'];
            let completedDeleted = 0;
            for (let page = 1; page <= 20; page++) {
              const { data } = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id,
                status: 'completed',
                per_page: 100,
                page
              });
              const runs = (data.workflow_runs || []).filter(r => conclusions.includes(r.conclusion || ''));
              if (runs.length === 0) break;
              for (const run of runs) {
                try {
                  await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                  completedDeleted++;
                } catch (e) {
                  failed++;
                }
              }
              if (runs.length < 100) break;
            }

            core.setOutput('summary', JSON.stringify({ canceled, deleted, completedDeleted, failed }));
      - name: Print result
        run: echo "${{ steps.sweep.outputs.summary }}"