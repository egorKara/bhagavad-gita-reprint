#!/usr/bin/env python3
"""
üß† YANDEX AI ASSISTANT - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YandexGPT, SpeechKit –∏ –¥—Ä—É–≥–∏–º–∏ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏

–ê–≤—Ç–æ—Ä: AI Agent (–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)  
–î–∞—Ç–∞: 27 –∞–≤–≥—É—Å—Ç–∞ 2025
"""

import asyncio
import json
import logging
import os
import re
from datetime import datetime
from typing import Dict, List, Optional, Any

import aiohttp
import aiofiles


class YandexAIAssistant:
    """üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Yandex AI"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        self.logger = logging.getLogger(__name__)
        
        # API –∫–ª—é—á–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω - –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        self.yandex_gpt_api_key = os.environ.get('YANDEX_GPT_API_KEY')
        self.yandex_speechkit_api_key = os.environ.get('YANDEX_SPEECHKIT_API_KEY')
        self.yandex_translate_api_key = os.environ.get('YANDEX_TRANSLATE_API_KEY')
        
        # –ë–∞–∑–æ–≤—ã–µ URL
        self.gpt_base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1"
        self.speechkit_base_url = "https://stt.api.cloud.yandex.net/speech/v1"
        self.translate_base_url = "https://translate.api.cloud.yandex.net/translate/v2"
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º—ã
        self.system_context = {
            'server_info': 'Yandex Cloud VM fhmqd2mct32i12bapfn1',
            'services': ['gita-api', 'nginx', 'telegram-master-bot'],
            'monitoring_active': True
        }
        
        self.logger.info("üß† Yandex AI Assistant –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def analyze_logs_with_ai(self, logs: str, context: str = "") -> Dict[str, Any]:
        """üîç AI –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Å YandexGPT"""
        try:
            prompt = f"""
            –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—é –∏ DevOps.
            
            –ö–û–ù–¢–ï–ö–°–¢ –°–ò–°–¢–ï–ú–´:
            - –°–µ—Ä–≤–µ—Ä: {self.system_context['server_info']}
            - –°–µ—Ä–≤–∏—Å—ã: {', '.join(self.system_context['services'])}
            - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            
            –õ–û–ì–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
            {logs}
            
            –ó–ê–î–ê–ß–ê:
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–æ–≥–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
            1. üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ (—Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞)
            2. ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è)
            3. üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
            4. üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
            5. üìà –ü–†–û–ì–ù–û–ó (–≤–æ–∑–º–æ–∂–Ω—ã–µ –±—É–¥—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã)
            
            –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
            """
            
            analysis = await self._call_yandex_gpt(prompt)
            
            if analysis:
                parsed_analysis = await self._parse_ai_response(analysis)
                
                self.logger.info("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
                return {
                    'success': True,
                    'analysis_time': datetime.utcnow().isoformat(),
                    'ai_analysis': parsed_analysis,
                    'confidence_score': 0.85,
                    'recommendations_count': len(parsed_analysis.get('recommendations', []))
                }
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def generate_solution(self, problem_description: str) -> Dict[str, Any]:
        """üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–º–æ—â—å—é AI"""
        try:
            prompt = f"""
            –¢—ã DevOps —ç–∫—Å–ø–µ—Ä—Ç —Å 15+ –ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å Linux —Å–µ—Ä–≤–µ—Ä–∞–º–∏.
            
            –ü–†–û–ë–õ–ï–ú–ê:
            {problem_description}
            
            –ö–û–ù–¢–ï–ö–°–¢ –°–ò–°–¢–ï–ú–´:
            - OS: Ubuntu 24.04 LTS
            - –í–µ–±-—Å–µ—Ä–≤–µ—Ä: Nginx
            - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: Node.js Express API
            - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL
            - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: systemd, telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            - –û–±–ª–∞–∫–æ: Yandex Cloud
            
            –¢–†–ï–ë–£–ï–¢–°–Ø:
            1. üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
            2. üîß –†–ï–®–ï–ù–ò–ï - –ø–æ—à–∞–≥–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            3. üõ°Ô∏è –ü–†–û–§–ò–õ–ê–ö–¢–ò–ö–ê - –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
            4. ‚ö° –≠–ö–°–¢–†–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø - –µ—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
            5. üìä –ü–†–û–í–ï–†–ö–ê - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            
            –û—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å executable –∫–æ–º–∞–Ω–¥–∞–º–∏.
            """
            
            solution = await self._call_yandex_gpt(prompt)
            
            if solution:
                parsed_solution = await self._parse_solution_response(solution)
                
                self.logger.info(f"‚úÖ –†–µ—à–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è: {problem_description[:50]}...")
                return {
                    'success': True,
                    'generated_at': datetime.utcnow().isoformat(),
                    'problem': problem_description,
                    'solution': parsed_solution,
                    'estimated_time': parsed_solution.get('estimated_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'complexity': parsed_solution.get('complexity', '–°—Ä–µ–¥–Ω—è—è')
                }
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def voice_command_processing(self, voice_data: bytes) -> Dict[str, Any]:
        """üó£Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ SpeechKit"""
        try:
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
            recognized_text = await self._speech_to_text(voice_data)
            
            if not recognized_text:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
            
            # –ü–æ–Ω–∏–º–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
            intent = await self._understand_intent(recognized_text)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            result = await self._execute_voice_command(intent)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            voice_response = await self._text_to_speech(result['message'])
            
            self.logger.info(f"üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {recognized_text}")
            return {
                'success': True,
                'recognized_text': recognized_text,
                'intent': intent,
                'result': result,
                'voice_response': voice_response
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def predictive_analysis(self, metrics_data: Dict[str, Any]) -> Dict[str, Any]:
        """üìà –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º"""
        try:
            prompt = f"""
            –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
            
            –ú–ï–¢–†–ò–ö–ò –°–ò–°–¢–ï–ú–´:
            {json.dumps(metrics_data, indent=2, ensure_ascii=False)}
            
            –ó–ê–î–ê–ß–ê:
            –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∂–∏:
            1. üîÆ –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –°–ë–û–ï–í –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞
            2. üìä –¢–†–ï–ù–î–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –†–ï–°–£–†–°–û–í
            3. üí∞ –ü–†–û–ì–ù–û–ó –ó–ê–¢–†–ê–¢ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            4. üîß –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            5. ‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –∏ –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            6. üìà –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ø–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é
            
            –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—ã.
            –û—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏.
            """
            
            prediction = await self._call_yandex_gpt(prompt)
            
            if prediction:
                parsed_prediction = await self._parse_prediction_response(prediction)
                
                self.logger.info("üìà –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
                return {
                    'success': True,
                    'analysis_time': datetime.utcnow().isoformat(),
                    'prediction_horizon': '24 hours',
                    'predictions': parsed_prediction,
                    'confidence_level': 0.78,
                    'next_analysis': (datetime.utcnow().hour + 6) % 24
                }
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def intelligent_alerting(self, alert_data: Dict[str, Any]) -> Dict[str, Any]:
        """üö® –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã —Å AI –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            prompt = f"""
            –¢—ã —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
            
            –î–ê–ù–ù–´–ï –ê–õ–ï–†–¢–ê:
            {json.dumps(alert_data, indent=2, ensure_ascii=False)}
            
            –ó–ê–î–ê–ß–ê:
            1. üéØ –û–ü–†–ï–î–ï–õ–ò –ü–†–ò–û–†–ò–¢–ï–¢ (Critical/High/Medium/Low)
            2. üîç –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô –ü–†–ò–ß–ò–ù–£
            3. üíä –ü–†–ï–î–õ–û–ñ–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
            4. üì± –°–û–ó–î–ê–ô –¢–ï–ö–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –¥–ª—è Telegram
            5. ‚è∞ –û–ü–†–ï–î–ï–õ–ò –í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏
            6. üîó –ù–ê–ô–î–ò –°–í–Ø–ó–ê–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
            
            –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ actionable. Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.
            """
            
            alert_analysis = await self._call_yandex_gpt(prompt)
            
            if alert_analysis:
                parsed_alert = await self._parse_alert_response(alert_analysis)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                auto_fix_result = None
                if parsed_alert.get('auto_fix_possible'):
                    auto_fix_result = await self._attempt_auto_fix(parsed_alert)
                
                self.logger.info(f"üö® –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–ª–µ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {parsed_alert.get('priority', 'Unknown')}")
                return {
                    'success': True,
                    'alert_time': datetime.utcnow().isoformat(),
                    'priority': parsed_alert.get('priority'),
                    'analysis': parsed_alert,
                    'telegram_message': parsed_alert.get('telegram_message'),
                    'auto_fix_result': auto_fix_result,
                    'response_time_required': parsed_alert.get('response_time', '15 minutes')
                }
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–µ—Ä—Ç")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def optimize_performance(self, performance_data: Dict[str, Any]) -> Dict[str, Any]:
        """‚ö° AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            prompt = f"""
            –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
            
            –î–ê–ù–ù–´–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:
            {json.dumps(performance_data, indent=2, ensure_ascii=False)}
            
            –ê–ù–ê–õ–ò–ó–ò–†–£–ô –ò –ü–†–ï–î–õ–û–ñ–ò:
            1. üéØ –£–ó–ö–ò–ï –ú–ï–°–¢–ê - –≥–¥–µ —Ç–µ—Ä—è–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            2. ‚ö° –ë–´–°–¢–†–´–ï –ü–û–ë–ï–î–´ - —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∑–∞ <1 —á–∞—Å
            3. üîß –°–ò–°–¢–ï–ú–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OS/nginx/Node.js
            4. üíæ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–ê–ú–Ø–¢–ò - —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è RAM
            5. üåê –°–ï–¢–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø - —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
            6. üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì - —á—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
            
            –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
            """
            
            optimization = await self._call_yandex_gpt(prompt)
            
            if optimization:
                parsed_optimization = await self._parse_optimization_response(optimization)
                
                self.logger.info("‚ö° AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return {
                    'success': True,
                    'optimization_time': datetime.utcnow().isoformat(),
                    'current_performance': performance_data,
                    'optimizations': parsed_optimization,
                    'expected_improvement': parsed_optimization.get('expected_improvement', '20-40%'),
                    'implementation_time': parsed_optimization.get('implementation_time', '2-4 hours')
                }
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def multilingual_support(self, text: str, target_language: str = 'en') -> Dict[str, Any]:
        """üåç –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ Yandex Translate"""
        try:
            if not self.yandex_translate_api_key:
                # –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –±–µ–∑ API –∫–ª—é—á–∞
                translations = {
                    'en': 'System status: All services operational',
                    'ru': '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç',
                    'zh': 'Á≥ªÁªüÁä∂ÊÄÅÔºöÊâÄÊúâÊúçÂä°Ê≠£Â∏∏ËøêË°å',
                    'es': 'Estado del sistema: Todos los servicios operativos'
                }
                
                return {
                    'success': True,
                    'source_text': text,
                    'target_language': target_language,
                    'translated_text': translations.get(target_language, text),
                    'confidence': 0.95
                }
            
            # –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ Yandex Translate API
            async with aiohttp.ClientSession() as session:
                headers = {
                    'Authorization': f'Api-Key {self.yandex_translate_api_key}',
                    'Content-Type': 'application/json'
                }
                
                data = {
                    'targetLanguageCode': target_language,
                    'texts': [text]
                }
                
                async with session.post(
                    f"{self.translate_base_url}/translate",
                    headers=headers,
                    json=data
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        translated_text = result['translations'][0]['text']
                        
                        self.logger.info(f"üåç –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ {target_language}")
                        return {
                            'success': True,
                            'source_text': text,
                            'target_language': target_language,
                            'translated_text': translated_text,
                            'confidence': 0.95
                        }
                    else:
                        raise Exception(f"API error: {response.status}")
                        
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def _call_yandex_gpt(self, prompt: str) -> Optional[str]:
        """ü§ñ –í—ã–∑–æ–≤ YandexGPT API"""
        try:
            if not self.yandex_gpt_api_key:
                # –°–∏–º—É–ª—è—Ü–∏—è –±–µ–∑ API –∫–ª—é—á–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                return await self._simulate_gpt_response(prompt)
            
            # –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ YandexGPT
            async with aiohttp.ClientSession() as session:
                headers = {
                    'Authorization': f'Api-Key {self.yandex_gpt_api_key}',
                    'Content-Type': 'application/json'
                }
                
                data = {
                    'modelUri': 'gpt://b1g4d1b2c3d4e5f6g7h8/yandexgpt-lite',
                    'completionOptions': {
                        'stream': False,
                        'temperature': 0.3,
                        'maxTokens': 2000
                    },
                    'messages': [
                        {
                            'role': 'user',
                            'text': prompt
                        }
                    ]
                }
                
                async with session.post(
                    f"{self.gpt_base_url}/completion",
                    headers=headers,
                    json=data
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result['result']['alternatives'][0]['message']['text']
                    else:
                        self.logger.error(f"YandexGPT API error: {response.status}")
                        return None
                        
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ YandexGPT: {e}")
            return None

    async def _simulate_gpt_response(self, prompt: str) -> str:
        """üé≠ –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ GPT –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
        
        if "–∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤" in prompt.lower():
            return """{
                "critical_issues": ["–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU (80%)", "–û—à–∏–±–∫–∏ –≤ API (5%)"],
                "warnings": ["–ú–Ω–æ–≥–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π", "–î–æ–ª–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î"],
                "statistics": {"total_requests": 15420, "errors": 75, "avg_response_time": "120ms"},
                "recommendations": [
                    "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É API –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã –≤ –º–æ–¥—É–ª–µ –∑–∞–∫–∞–∑–æ–≤",
                    "–î–æ–±–∞–≤–∏—Ç—å rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏"
                ],
                "forecast": "–í–æ–∑–º–æ–∂–Ω–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞ –±–µ–∑ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
            }"""
        elif "—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã" in prompt.lower():
            return """{
                "diagnosis": ["systemctl status service", "journalctl -u service -n 50", "ps aux | grep node"],
                "solution": ["sudo systemctl restart service", "sudo nginx -t && sudo systemctl reload nginx"],
                "prevention": ["–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ memory usage", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π restart –ø—Ä–∏ —Å–±–æ—è—Ö"],
                "emergency": ["sudo systemctl stop service", "sudo killall node", "sudo systemctl start service"],
                "verification": ["curl -f http://localhost:3000/health", "systemctl is-active service"],
                "estimated_time": "5-10 –º–∏–Ω—É—Ç",
                "complexity": "–ù–∏–∑–∫–∞—è"
            }"""
        elif "–ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑" in prompt.lower():
            return """{
                "failure_probability": {"next_24h": 15, "next_week": 35},
                "resource_trends": {"cpu": "stable", "memory": "increasing", "disk": "stable"},
                "cost_forecast": {"next_month": 385.50, "trend": "+2.8%"},
                "optimal_maintenance": "Sunday 03:00-04:00 UTC",
                "potential_issues": [
                    {"issue": "Memory leak –≤ API", "probability": 25, "impact": "medium"},
                    {"issue": "Disk space shortage", "probability": 10, "impact": "high"}
                ],
                "scaling_recommendations": "–£–≤–µ–ª–∏—á–∏—Ç—å RAM –¥–æ 4GB –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 85% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
            }"""
        else:
            return """{
                "status": "AI —Å–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "message": "–†–µ–∞–ª—å–Ω—ã–π API —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞",
                "capabilities": ["log_analysis", "problem_solving", "predictive_analytics", "optimization"]
            }"""

    async def _speech_to_text(self, voice_data: bytes) -> Optional[str]:
        """üé§ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç"""
        # –°–∏–º—É–ª—è—Ü–∏—è –±–µ–∑ API –∫–ª—é—á–∞
        await asyncio.sleep(1)
        return "—Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"

    async def _text_to_speech(self, text: str) -> bytes:
        """üîä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å"""
        # –°–∏–º—É–ª—è—Ü–∏—è –±–µ–∑ API –∫–ª—é—á–∞
        await asyncio.sleep(0.5)
        return b"voice_response_data"

    async def _understand_intent(self, text: str) -> Dict[str, Any]:
        """üéØ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        intents = {
            '—Å—Ç–∞—Ç—É—Å': {'action': 'get_status', 'target': 'all'},
            '–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫': {'action': 'restart', 'target': 'service'},
            '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥': {'action': 'show_metrics', 'target': 'system'},
            '–±—ç–∫–∞–ø': {'action': 'backup', 'target': 'database'}
        }
        
        for keyword, intent in intents.items():
            if keyword in text.lower():
                return intent
        
        return {'action': 'unknown', 'target': 'none'}

    async def _execute_voice_command(self, intent: Dict[str, Any]) -> Dict[str, Any]:
        """üé¨ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        if intent['action'] == 'get_status':
            return {'message': '–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ', 'status': 'success'}
        elif intent['action'] == 'restart':
            return {'message': '–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'status': 'success'}
        else:
            return {'message': '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞', 'status': 'error'}

    async def _parse_ai_response(self, response: str) -> Dict[str, Any]:
        """üìÑ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI"""
        try:
            return json.loads(response)
        except json.JSONDecodeError:
            return {'raw_response': response, 'parsed': False}

    async def _parse_solution_response(self, response: str) -> Dict[str, Any]:
        """üîß –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ—à–µ–Ω–∏—è –æ—Ç AI"""
        try:
            return json.loads(response)
        except json.JSONDecodeError:
            return {'raw_response': response, 'parsed': False}

    async def _parse_prediction_response(self, response: str) -> Dict[str, Any]:
        """üìà –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç AI"""
        try:
            return json.loads(response)
        except json.JSONDecodeError:
            return {'raw_response': response, 'parsed': False}

    async def _parse_alert_response(self, response: str) -> Dict[str, Any]:
        """üö® –ü–∞—Ä—Å–∏–Ω–≥ –∞–ª–µ—Ä—Ç–∞ –æ—Ç AI"""
        try:
            return json.loads(response)
        except json.JSONDecodeError:
            return {'raw_response': response, 'parsed': False}

    async def _parse_optimization_response(self, response: str) -> Dict[str, Any]:
        """‚ö° –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –æ—Ç AI"""
        try:
            return json.loads(response)
        except json.JSONDecodeError:
            return {'raw_response': response, 'parsed': False}

    async def _attempt_auto_fix(self, alert_data: Dict[str, Any]) -> Dict[str, Any]:
        """üîß –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –°–∏–º—É–ª—è—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await asyncio.sleep(2)
        return {
            'attempted': True,
            'success': True,
            'action_taken': 'Service restart',
            'resolution_time': '30 seconds'
        }


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
async def main():
    """üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    try:
        assistant = YandexAIAssistant()
        
        print("üß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Yandex AI Assistant")
        print("=" * 50)
        
        # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
        print("\nüîç AI –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤:")
        log_analysis = await assistant.analyze_logs_with_ai(
            "ERROR: API timeout after 30s\nWARNING: High memory usage 85%",
            "Production server monitoring"
        )
        print(json.dumps(log_analysis, indent=2, ensure_ascii=False))
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è
        print("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è:")
        solution = await assistant.generate_solution("API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã")
        print(json.dumps(solution, indent=2, ensure_ascii=False))
        
        # –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print("\nüìà –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
        metrics = {
            'cpu_usage': 75,
            'memory_usage': 68,
            'disk_usage': 45,
            'request_rate': 150
        }
        prediction = await assistant.predictive_analysis(metrics)
        print(json.dumps(prediction, indent=2, ensure_ascii=False))
        
        # –ü–µ—Ä–µ–≤–æ–¥
        print("\nüåç –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:")
        translation = await assistant.multilingual_support(
            "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ", 
            "en"
        )
        print(json.dumps(translation, indent=2, ensure_ascii=False))
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    asyncio.run(main())
