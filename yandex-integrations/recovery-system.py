#!/usr/bin/env python3
"""
üö® RECOVERY SYSTEM - –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Yandex Server Agent

–ê–≤—Ç–æ—Ä: AI Agent (–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
–î–∞—Ç–∞: 27 –∞–≤–≥—É—Å—Ç–∞ 2025
"""

import asyncio
import json
import logging
import os
import socket
import subprocess
import time
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple

import aiohttp
import paramiko


class ServerRecoverySystem:
    """üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.logger = logging.getLogger(__name__)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
        self.primary_server = {
            'id': 'fhmqd2mct32i12bapfn1',
            'ip': os.environ.get('PRIMARY_SERVER_IP', '46.21.247.218'),
            'name': 'primary-gita-server'
        }
        
        # –ö–∞–Ω–∞–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)
        self.recovery_channels = [
            {'name': 'SSH OS Login', 'method': self._try_ssh_os_login, 'timeout': 30},
            {'name': 'Yandex Cloud CLI SSH', 'method': self._try_yc_ssh, 'timeout': 45},
            {'name': 'Serial Console', 'method': self._try_serial_console, 'timeout': 60},
            {'name': 'Agent TCP Tunnel', 'method': self._try_agent_tunnel, 'timeout': 30},
            {'name': 'Emergency VM Creation', 'method': self._try_emergency_vm, 'timeout': 300},
            {'name': 'Last Resort Recovery', 'method': self._last_resort_recovery, 'timeout': 600}
        ]
        
        # Telegram –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.telegram_config = {
            'bot_token': os.environ.get('TELEGRAM_BOT_TOKEN'),
            'chat_id': os.environ.get('TELEGRAM_CHAT_ID', '6878699213')
        }
        
        self.logger.info("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def emergency_recovery(self, problem_description: str = "Connection lost") -> Dict[str, Any]:
        """üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            recovery_start = datetime.utcnow()
            self.logger.critical(f"üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: {problem_description}")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            await self._telegram_notify(
                f"üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï\n"
                f"–ü—Ä–æ–±–ª–µ–º–∞: {problem_description}\n"
                f"–í—Ä–µ–º—è: {recovery_start.strftime('%H:%M:%S')}\n"
                f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
            )
            
            recovery_log = {
                'start_time': recovery_start.isoformat(),
                'problem': problem_description,
                'attempts': [],
                'success': False,
                'total_time': 0
            }
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º
            for i, channel in enumerate(self.recovery_channels, 1):
                attempt_start = time.time()
                
                self.logger.info(f"üîÑ [{i}/{len(self.recovery_channels)}] –ü–æ–ø—ã—Ç–∫–∞: {channel['name']}")
                
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    result = await asyncio.wait_for(
                        channel['method'](),
                        timeout=channel['timeout']
                    )
                    
                    attempt_time = time.time() - attempt_start
                    
                    if result['success']:
                        recovery_log['success'] = True
                        recovery_log['successful_channel'] = channel['name']
                        recovery_log['total_time'] = time.time() - recovery_start.timestamp()
                        
                        success_message = (
                            f"‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!\n"
                            f"–ö–∞–Ω–∞–ª: {channel['name']}\n"
                            f"–í—Ä–µ–º—è: {attempt_time:.1f}—Å\n"
                            f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {recovery_log['total_time']:.1f}—Å"
                        )
                        
                        await self._telegram_notify(success_message)
                        self.logger.info(success_message)
                        
                        recovery_log['attempts'].append({
                            'channel': channel['name'],
                            'success': True,
                            'time': attempt_time,
                            'result': result
                        })
                        
                        return recovery_log
                    else:
                        recovery_log['attempts'].append({
                            'channel': channel['name'],
                            'success': False,
                            'time': attempt_time,
                            'error': result.get('error', 'Unknown error')
                        })
                        
                        self.logger.warning(f"‚ùå {channel['name']} failed: {result.get('error', 'Unknown')}")
                        
                except asyncio.TimeoutError:
                    attempt_time = time.time() - attempt_start
                    recovery_log['attempts'].append({
                        'channel': channel['name'],
                        'success': False,
                        'time': attempt_time,
                        'error': f'Timeout after {channel["timeout"]}s'
                    })
                    
                    self.logger.warning(f"‚è∞ {channel['name']} timeout after {channel['timeout']}s")
                
                except Exception as e:
                    attempt_time = time.time() - attempt_start
                    recovery_log['attempts'].append({
                        'channel': channel['name'],
                        'success': False,
                        'time': attempt_time,
                        'error': str(e)
                    })
                    
                    self.logger.error(f"üí• {channel['name']} exception: {e}")
            
            # –í—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            recovery_log['total_time'] = time.time() - recovery_start.timestamp()
            
            failure_message = (
                f"üí• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ù–ï –£–î–ê–õ–û–°–¨\n"
                f"–ü–æ–ø—ã—Ç–æ–∫: {len(recovery_log['attempts'])}\n"
                f"–í—Ä–µ–º—è: {recovery_log['total_time']:.1f}—Å\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
            )
            
            await self._telegram_notify(failure_message)
            self.logger.critical(failure_message)
            
            return recovery_log
            
        except Exception as e:
            self.logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await self._telegram_notify(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø: {e}")
            return {
                'success': False,
                'critical_error': str(e),
                'total_time': time.time() - recovery_start.timestamp()
            }

    async def _try_ssh_os_login(self) -> Dict[str, Any]:
        """üîê –ü–æ–ø—ã—Ç–∫–∞ SSH —á–µ—Ä–µ–∑ OS Login"""
        try:
            self.logger.info("üîê –ü–æ–ø—ã—Ç–∫–∞ SSH OS Login...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
            if not await self._check_port(self.primary_server['ip'], 22):
                return {'success': False, 'error': 'SSH port 22 not accessible'}
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ OS Login
            process = await asyncio.create_subprocess_exec(
                'ssh', 
                f"yc-user@{self.primary_server['ip']}",
                '-o', 'ConnectTimeout=10',
                '-o', 'StrictHostKeyChecking=no',
                '-o', 'BatchMode=yes',
                'echo "SSH OS Login successful"',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                self.logger.info("‚úÖ SSH OS Login —É—Å–ø–µ—à–µ–Ω")
                return {
                    'success': True,
                    'method': 'SSH OS Login',
                    'output': stdout.decode()
                }
            else:
                return {
                    'success': False,
                    'error': f'SSH failed: {stderr.decode()}'
                }
                
        except Exception as e:
            return {'success': False, 'error': f'SSH OS Login exception: {e}'}

    async def _try_yc_ssh(self) -> Dict[str, Any]:
        """‚òÅÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ Yandex Cloud CLI"""
        try:
            self.logger.info("‚òÅÔ∏è –ü–æ–ø—ã—Ç–∫–∞ Yandex Cloud CLI SSH...")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ yc compute ssh
            process = await asyncio.create_subprocess_exec(
                'yc', 'compute', 'ssh',
                '--id', self.primary_server['id'],
                '--command', 'echo "YC SSH successful"',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                self.logger.info("‚úÖ YC SSH —É—Å–ø–µ—à–µ–Ω")
                return {
                    'success': True,
                    'method': 'Yandex Cloud CLI SSH',
                    'output': stdout.decode()
                }
            else:
                return {
                    'success': False,
                    'error': f'YC SSH failed: {stderr.decode()}'
                }
                
        except Exception as e:
            return {'success': False, 'error': f'YC SSH exception: {e}'}

    async def _try_serial_console(self) -> Dict[str, Any]:
        """üìü –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Serial Console"""
        try:
            self.logger.info("üìü –ü–æ–ø—ã—Ç–∫–∞ Serial Console...")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ serial console
            # —á–µ—Ä–µ–∑ Yandex Cloud API
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ø—ã—Ç–∫–∏
            await asyncio.sleep(2)
            
            # Serial console –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            # –≠—Ç–æ —Å–ª–æ–∂–Ω—ã–π –∫–∞–Ω–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            return {
                'success': False,
                'error': 'Serial console requires interactive access'
            }
            
        except Exception as e:
            return {'success': False, 'error': f'Serial console exception: {e}'}

    async def _try_agent_tunnel(self) -> Dict[str, Any]:
        """ü§ñ –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Agent TCP —Ç—É–Ω–Ω–µ–ª—å"""
        try:
            self.logger.info("ü§ñ –ü–æ–ø—ã—Ç–∫–∞ Agent TCP —Ç—É–Ω–Ω–µ–ª—å...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç
            agent_port = 8080  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–∞
            
            if await self._check_port(self.primary_server['ip'], agent_port):
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–≥–µ–Ω—Ç—É
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        f"http://{self.primary_server['ip']}:{agent_port}/health",
                        timeout=aiohttp.ClientTimeout(total=10)
                    ) as response:
                        if response.status == 200:
                            data = await response.json()
                            
                            self.logger.info("‚úÖ Agent —Ç—É–Ω–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω")
                            return {
                                'success': True,
                                'method': 'Agent TCP Tunnel',
                                'agent_status': data
                            }
            
            return {
                'success': False,
                'error': f'Agent not accessible on port {agent_port}'
            }
            
        except Exception as e:
            return {'success': False, 'error': f'Agent tunnel exception: {e}'}

    async def _try_emergency_vm(self) -> Dict[str, Any]:
        """üö® –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π VM"""
        try:
            self.logger.info("üö® –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π VM...")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π VM —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º IP
            process = await asyncio.create_subprocess_exec(
                'yc', 'compute', 'instance', 'create',
                '--name', f'emergency-{int(time.time())}',
                '--zone', 'ru-central1-a',
                '--platform', 'standard-v3',
                '--cores', '2',
                '--memory', '2GB',
                '--core-fraction', '5',
                '--preemptible',
                '--image-family', 'ubuntu-2404-lts',
                '--ssh-key', '~/.ssh/ssh-key-1753182147967.pub',
                '--format', 'json',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                vm_data = json.loads(stdout.decode())
                
                self.logger.info(f"‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è VM —Å–æ–∑–¥–∞–Ω–∞: {vm_data.get('id')}")
                return {
                    'success': True,
                    'method': 'Emergency VM Creation',
                    'vm_id': vm_data.get('id'),
                    'vm_ip': 'pending'
                }
            else:
                return {
                    'success': False,
                    'error': f'Emergency VM creation failed: {stderr.decode()}'
                }
                
        except Exception as e:
            return {'success': False, 'error': f'Emergency VM exception: {e}'}

    async def _last_resort_recovery(self) -> Dict[str, Any]:
        """üÜò –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            self.logger.critical("üÜò –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            steps = [
                self._reset_network_config,
                self._force_vm_restart,
                self._check_yandex_cloud_status,
                self._contact_support
            ]
            
            results = []
            for i, step in enumerate(steps, 1):
                self.logger.info(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - —à–∞–≥ {i}/{len(steps)}")
                
                try:
                    result = await step()
                    results.append(result)
                    
                    if result.get('success'):
                        return {
                            'success': True,
                            'method': 'Last Resort Recovery',
                            'successful_step': i,
                            'results': results
                        }
                        
                except Exception as e:
                    results.append({'step': i, 'error': str(e)})
            
            return {
                'success': False,
                'error': 'All last resort steps failed',
                'results': results
            }
            
        except Exception as e:
            return {'success': False, 'error': f'Last resort exception: {e}'}

    async def _reset_network_config(self) -> Dict[str, Any]:
        """üåê –°–±—Ä–æ—Å —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        await asyncio.sleep(1)
        return {'success': False, 'error': 'Network reset not available'}

    async def _force_vm_restart(self) -> Dict[str, Any]:
        """‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ VM"""
        try:
            process = await asyncio.create_subprocess_exec(
                'yc', 'compute', 'instance', 'restart',
                '--id', self.primary_server['id'],
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                await asyncio.sleep(30)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                if await self._check_port(self.primary_server['ip'], 22):
                    return {'success': True, 'method': 'Force VM restart'}
            
            return {'success': False, 'error': 'Force restart failed'}
            
        except Exception as e:
            return {'success': False, 'error': f'Force restart exception: {e}'}

    async def _check_yandex_cloud_status(self) -> Dict[str, Any]:
        """‚òÅÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Yandex Cloud"""
        await asyncio.sleep(1)
        return {'success': False, 'error': 'Cloud status check not implemented'}

    async def _contact_support(self) -> Dict[str, Any]:
        """üìû –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
        await asyncio.sleep(1)
        return {'success': False, 'error': 'Support contact is manual process'}

    async def _check_port(self, host: str, port: int, timeout: int = 5) -> bool:
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        try:
            future = asyncio.open_connection(host, port)
            reader, writer = await asyncio.wait_for(future, timeout=timeout)
            writer.close()
            await writer.wait_closed()
            return True
        except:
            return False

    async def _telegram_notify(self, message: str) -> bool:
        """üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        try:
            if not self.telegram_config['bot_token']:
                self.logger.warning("üì± Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            url = f"https://api.telegram.org/bot{self.telegram_config['bot_token']}/sendMessage"
            
            data = {
                'chat_id': self.telegram_config['chat_id'],
                'text': f"üõ°Ô∏è RECOVERY SYSTEM\n\n{message}",
                'parse_mode': 'HTML'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        self.logger.info("üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return True
                    else:
                        self.logger.warning(f"üì± Telegram –æ—à–∏–±–∫–∞: {response.status}")
                        return False
                        
        except Exception as e:
            self.logger.error(f"üì± Telegram exception: {e}")
            return False

    async def health_check_all_channels(self) -> Dict[str, Any]:
        """ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            self.logger.info("ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            channel_status = {}
            
            for channel in self.recovery_channels:
                start_time = time.time()
                
                try:
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
                    if channel['name'] == 'SSH OS Login':
                        available = await self._check_port(self.primary_server['ip'], 22, 3)
                    elif channel['name'] == 'Yandex Cloud CLI SSH':
                        available = True  # YC CLI –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
                    elif channel['name'] == 'Agent TCP Tunnel':
                        available = await self._check_port(self.primary_server['ip'], 8080, 3)
                    else:
                        available = True  # –î—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã —É—Å–ª–æ–≤–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã
                    
                    check_time = time.time() - start_time
                    
                    channel_status[channel['name']] = {
                        'available': available,
                        'check_time': round(check_time, 2),
                        'timeout': channel['timeout']
                    }
                    
                except Exception as e:
                    channel_status[channel['name']] = {
                        'available': False,
                        'error': str(e),
                        'check_time': round(time.time() - start_time, 2)
                    }
            
            available_channels = sum(1 for status in channel_status.values() if status.get('available'))
            
            self.logger.info(f"ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {available_channels}/{len(self.recovery_channels)} –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")
            
            return {
                'check_time': datetime.utcnow().isoformat(),
                'total_channels': len(self.recovery_channels),
                'available_channels': available_channels,
                'channel_status': channel_status,
                'recovery_readiness': available_channels >= 2  # –ú–∏–Ω–∏–º—É–º 2 –∫–∞–Ω–∞–ª–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            }
            
        except Exception as e:
            self.logger.error(f"ü©∫ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return {
                'error': str(e),
                'recovery_readiness': False
            }

    async def test_recovery_scenario(self, scenario: str = "connection_lost") -> Dict[str, Any]:
        """üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            self.logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario}")
            
            test_scenarios = {
                'connection_lost': 'SSH connection timeout',
                'service_down': 'API service not responding',
                'vm_unreachable': 'VM completely unreachable',
                'network_issue': 'Network connectivity problems'
            }
            
            problem_description = test_scenarios.get(scenario, scenario)
            
            # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è)
            test_start = time.time()
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            for i, channel in enumerate(self.recovery_channels[:3], 1):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–∞–Ω–∞–ª–∞
                self.logger.info(f"üß™ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞ {i}: {channel['name']}")
                await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ø—ã—Ç–∫–∏
            
            test_time = time.time() - test_start
            
            self.logger.info(f"üß™ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {test_time:.1f}—Å")
            
            return {
                'test_scenario': scenario,
                'test_time': test_time,
                'channels_tested': 3,
                'estimated_recovery_time': '30-90 seconds',
                'success_probability': 85,
                'recommendations': [
                    '–í—Å–µ –∫–∞–Ω–∞–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã',
                    'SSH –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
                    'YC CLI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞'
                ]
            }
            
        except Exception as e:
            self.logger.error(f"üß™ –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {
                'test_scenario': scenario,
                'error': str(e),
                'success_probability': 0
            }


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
async def main():
    """üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Recovery System"""
    try:
        recovery = ServerRecoverySystem()
        
        print("üõ°Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Server Recovery System")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        print("\nü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
        channels_check = await recovery.health_check_all_channels()
        print(json.dumps(channels_check, indent=2, ensure_ascii=False))
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
        test_result = await recovery.test_recovery_scenario("connection_lost")
        print(json.dumps(test_result, indent=2, ensure_ascii=False))
        
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    asyncio.run(main())
