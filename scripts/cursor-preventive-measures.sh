#!/bin/bash

# Cursor Preventive Measures v1.0
# –ü—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Cursor IDE
# –ê–≤—Ç–æ—Ä: Cursor Background Agent
# –î–∞—Ç–∞: 2025-08-23

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_NAME="cursor-preventive-measures"
LOG_FILE="$HOME/.cursor/preventive-measures.log"
BACKUP_DIR="$HOME/.cursor/backups"
CURSOR_SETTINGS="$HOME/.cursor/User/settings.json"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "$(dirname "$LOG_FILE")" "$BACKUP_DIR"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_colored() {
    local color="$1"
    shift
    echo -e "${color}$*${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Cursor
create_cursor_backup() {
    if [[ -f "$CURSOR_SETTINGS" ]]; then
        local backup_file="$BACKUP_DIR/settings_preventive_backup_$(date +%Y%m%d_%H%M%S).json"
        cp "$CURSOR_SETTINGS" "$backup_file"
        print_colored "$GREEN" "‚úÖ Backup —Å–æ–∑–¥–∞–Ω: $backup_file"
        log "INFO" "Cursor settings backup created: $backup_file"
        echo "$backup_file"
    else
        print_colored "$YELLOW" "‚ö†Ô∏è  –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ Cursor –Ω–µ –Ω–∞–π–¥–µ–Ω: $CURSOR_SETTINGS"
        log "WARN" "Cursor settings file not found: $CURSOR_SETTINGS"
        return 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
clear_proxy_settings() {
    print_colored "$CYAN" "üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫..."
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
    local proxy_vars=("HTTP_PROXY" "HTTPS_PROXY" "http_proxy" "https_proxy" "FTP_PROXY" "ftp_proxy" "NO_PROXY" "no_proxy")
    local cleared_vars=()
    
    for var in "${proxy_vars[@]}"; do
        if [[ -n "${!var:-}" ]]; then
            unset "$var"
            cleared_vars+=("$var")
            log "INFO" "Cleared environment variable: $var"
        fi
    done
    
    if [[ ${#cleared_vars[@]} -gt 0 ]]; then
        print_colored "$GREEN" "‚úÖ –û—á–∏—â–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã: ${cleared_vars[*]}"
    else
        print_colored "$GREEN" "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ Cursor
    if [[ -f "$CURSOR_SETTINGS" ]]; then
        python3 -c "
import json
import sys

try:
    with open('$CURSOR_SETTINGS', 'r') as f:
        settings = json.load(f)
    
    proxy_keys = [
        'http.proxy',
        'http.proxySupport', 
        'http.proxyAuthorization',
        'http.proxyStrictSSL',
        'http.systemCertificates'
    ]
    
    removed = []
    for key in proxy_keys:
        if key in settings:
            del settings[key]
            removed.append(key)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    optimal_settings = {
        'http.proxySupport': 'off',
        'http.systemCertificates': True,
        'extensions.autoCheckUpdates': False,
        'telemetry.telemetryLevel': 'off',
        'update.mode': 'manual'
    }
    
    for key, value in optimal_settings.items():
        settings[key] = value
    
    with open('$CURSOR_SETTINGS', 'w') as f:
        json.dump(settings, f, indent=4)
    
    if removed:
        print('Removed proxy settings:', ', '.join(removed))
    print('Applied optimal connection settings')
        
except Exception as e:
    print(f'Error processing Cursor settings: {e}')
    sys.exit(1)
"
        print_colored "$GREEN" "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Cursor –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
        log "INFO" "Cursor proxy settings cleared and optimized"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
handle_conflicting_processes() {
    print_colored "$CYAN" "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Tor –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    local tor_pids=$(pgrep -f "^tor " 2>/dev/null || true)
    local tor_browser_pids=$(pgrep -f tor-browser 2>/dev/null || true)
    
    if [[ -n "$tor_pids" ]]; then
        print_colored "$YELLOW" "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ Tor –ø—Ä–æ—Ü–µ—Å—Å—ã:"
        echo "$tor_pids" | while read pid; do
            if [[ -n "$pid" ]]; then
                local cmd=$(ps -p "$pid" -o comm= 2>/dev/null || echo "unknown")
                print_colored "$YELLOW" "   ‚Ä¢ PID $pid: $cmd"
            fi
        done
        
        read -p "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π Tor? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo systemctl stop tor || print_colored "$YELLOW" "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Tor —Å–µ—Ä–≤–∏—Å"
            print_colored "$GREEN" "‚úÖ Tor —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            log "INFO" "Tor service stopped by user request"
        fi
    fi
    
    if [[ -n "$tor_browser_pids" ]]; then
        local count=$(echo "$tor_browser_pids" | wc -w)
        print_colored "$YELLOW" "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω Tor Browser ($count –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)"
        print_colored "$BLUE" "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å Tor Browser –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã Cursor"
        log "INFO" "Tor Browser processes detected: $count"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–∫—Å–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    local proxy_processes=$(pgrep -f -i "proxy\|squid\|privoxy" 2>/dev/null || true)
    if [[ -n "$proxy_processes" ]]; then
        print_colored "$YELLOW" "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—Ä—É–≥–∏–µ –ø—Ä–æ–∫—Å–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã:"
        echo "$proxy_processes" | while read pid; do
            if [[ -n "$pid" ]]; then
                local cmd=$(ps -p "$pid" -o cmd= 2>/dev/null || echo "unknown")
                print_colored "$YELLOW" "   ‚Ä¢ PID $pid: $cmd"
            fi
        done
        log "WARN" "Other proxy processes detected"
    fi
}

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è DNS –Ω–∞—Å—Ç—Ä–æ–µ–∫
optimize_dns() {
    print_colored "$CYAN" "üåê –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è DNS –Ω–∞—Å—Ç—Ä–æ–µ–∫..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö DNS —Å–µ—Ä–≤–µ—Ä–æ–≤
    local current_dns=$(cat /etc/resolv.conf | grep nameserver | head -3)
    print_colored "$BLUE" "üìã –¢–µ–∫—É—â–∏–µ DNS —Å–µ—Ä–≤–µ—Ä—ã:"
    echo "$current_dns" | while read line; do
        print_colored "$BLUE" "   $line"
    done
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ DNS
    local dns_servers=("8.8.8.8" "1.1.1.1" "208.67.222.222")
    print_colored "$BLUE" "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ DNS..."
    
    for dns in "${dns_servers[@]}"; do
        local start_time=$(date +%s.%N)
        if dig @"$dns" google.com +short >/dev/null 2>&1; then
            local end_time=$(date +%s.%N)
            local duration=$(echo "$end_time - $start_time" | bc -l 2>/dev/null || echo "N/A")
            print_colored "$GREEN" "‚úÖ $dns: ${duration}s"
        else
            print_colored "$RED" "‚ùå $dns: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    done
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π DNS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    local dns_config="$HOME/.cursor/dns-backup.conf"
    cat > "$dns_config" << 'EOF'
# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ DNS —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è Cursor
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º

nameserver 8.8.8.8          # Google DNS
nameserver 1.1.1.1          # Cloudflare DNS  
nameserver 208.67.222.222   # OpenDNS
EOF
    
    print_colored "$GREEN" "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è DNS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $dns_config"
    log "INFO" "Alternative DNS configuration created"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
create_recovery_script() {
    local recovery_script="$HOME/.cursor/emergency-recovery.sh"
    
    cat > "$recovery_script" << 'EOF'
#!/bin/bash
# Emergency Recovery Script for Cursor IDE
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

echo "üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï CURSOR IDE"
echo "======================================"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö Cursor –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Cursor –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
pkill -f cursor || true

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
echo "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
rm -rf ~/.cursor/logs/* 2>/dev/null || true
rm -rf ~/.cursor/CachedData/* 2>/dev/null || true

# –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ç–∏
echo "üåê –°–±—Ä–æ—Å —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫..."
unset HTTP_PROXY HTTPS_PROXY http_proxy https_proxy 2>/dev/null || true

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ DNS
echo "üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ DNS..."
sudo systemctl restart systemd-resolved 2>/dev/null || true

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
echo "üì° –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞..."
sudo systemctl restart NetworkManager 2>/dev/null || true

echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
echo "üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å Cursor IDE –∑–∞–Ω–æ–≤–æ"
EOF
    
    chmod +x "$recovery_script"
    print_colored "$GREEN" "‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: $recovery_script"
    log "INFO" "Emergency recovery script created"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
setup_monitoring() {
    print_colored "$CYAN" "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ cron –∑–∞–¥–∞—á–∏
    local cron_entry="*/5 * * * * $PWD/scripts/cursor-connection-monitor.sh check >/dev/null 2>&1"
    local temp_cron=$(mktemp)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ crontab
    crontab -l 2>/dev/null > "$temp_cron" || true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
    if ! grep -q "cursor-connection-monitor" "$temp_cron"; then
        echo "$cron_entry" >> "$temp_cron"
        crontab "$temp_cron"
        print_colored "$GREEN" "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ cron –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
        log "INFO" "Cron job added for automatic monitoring"
    else
        print_colored "$BLUE" "‚ÑπÔ∏è  Cron –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    rm -f "$temp_cron"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ systemd timer (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ cron)
    local timer_dir="$HOME/.config/systemd/user"
    mkdir -p "$timer_dir"
    
    cat > "$timer_dir/cursor-monitor.service" << EOF
[Unit]
Description=Cursor Connection Monitor
After=network.target

[Service]
Type=oneshot
ExecStart=$PWD/scripts/cursor-connection-monitor.sh check
User=%i

[Install]
WantedBy=default.target
EOF

    cat > "$timer_dir/cursor-monitor.timer" << EOF
[Unit]
Description=Run Cursor Connection Monitor every 5 minutes
Requires=cursor-monitor.service

[Timer]
OnCalendar=*:0/5
Persistent=true

[Install]
WantedBy=timers.target
EOF

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è systemd timer
    systemctl --user daemon-reload 2>/dev/null || true
    systemctl --user enable cursor-monitor.timer 2>/dev/null || true
    systemctl --user start cursor-monitor.timer 2>/dev/null || true
    
    print_colored "$GREEN" "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω systemd timer –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    log "INFO" "Systemd timer configured for monitoring"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
create_security_profile() {
    print_colored "$CYAN" "üîí –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    
    local security_profile="$HOME/.cursor/security-profile.json"
    
    cat > "$security_profile" << 'EOF'
{
    "profile_name": "Cursor Connection Security",
    "version": "1.0",
    "created": "2025-08-23",
    "security_measures": {
        "proxy_isolation": {
            "enabled": true,
            "description": "–ò–∑–æ–ª—è—Ü–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        },
        "dns_redundancy": {
            "enabled": true,
            "primary_dns": "8.8.8.8",
            "secondary_dns": "1.1.1.1", 
            "tertiary_dns": "208.67.222.222"
        },
        "process_monitoring": {
            "enabled": true,
            "check_interval": 300,
            "auto_fix": true
        },
        "connection_validation": {
            "enabled": true,
            "test_endpoints": [
                "https://api.github.com",
                "https://www.google.com"
            ]
        },
        "backup_strategy": {
            "enabled": true,
            "retention_days": 30,
            "location": "~/.cursor/backups/"
        }
    },
    "incident_response": {
        "auto_recovery": true,
        "notification_methods": ["log", "console"],
        "escalation_threshold": 3
    }
}
EOF
    
    print_colored "$GREEN" "‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: $security_profile"
    log "INFO" "Security profile created"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ—Ä
validate_measures() {
    print_colored "$CYAN" "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä..."
    
    local score=0
    local max_score=8
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ backup
    if [[ -d "$BACKUP_DIR" ]] && [[ $(ls -1 "$BACKUP_DIR" | wc -l) -gt 0 ]]; then
        print_colored "$GREEN" "‚úÖ –°–∏—Å—Ç–µ–º–∞ backup: —Ä–∞–±–æ—Ç–∞–µ—Ç"
        ((score++))
    else
        print_colored "$RED" "‚ùå –°–∏—Å—Ç–µ–º–∞ backup: –ø—Ä–æ–±–ª–µ–º—ã"
    fi
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Cursor
    if [[ -f "$CURSOR_SETTINGS" ]]; then
        if grep -q '"http.proxySupport": "off"' "$CURSOR_SETTINGS"; then
            print_colored "$GREEN" "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Cursor: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
            ((score++))
        else
            print_colored "$YELLOW" "‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Cursor: —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
        fi
    fi
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if [[ -f "scripts/cursor-connection-monitor.sh" ]]; then
        print_colored "$GREEN" "‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: –≥–æ—Ç–æ–≤–∞"
        ((score++))
    else
        print_colored "$RED" "‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if [[ -f "$HOME/.cursor/emergency-recovery.sh" ]]; then
        print_colored "$GREEN" "‚úÖ –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: –≥–æ—Ç–æ–≤"
        ((score++))
    else
        print_colored "$RED" "‚ùå –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
    if dig +short google.com >/dev/null 2>&1; then
        print_colored "$GREEN" "‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç"
        ((score++))
    else
        print_colored "$RED" "‚ùå DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º—ã"
    fi
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if curl -s --max-time 5 https://api.github.com >/dev/null; then
        print_colored "$GREEN" "‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ"
        ((score++))
    else
        print_colored "$RED" "‚ùå –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º—ã"
    fi
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if [[ -f "$LOG_FILE" ]]; then
        print_colored "$GREEN" "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –∞–∫—Ç–∏–≤–Ω–∞"
        ((score++))
    else
        print_colored "$RED" "‚ùå –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    fi
    
    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if [[ -f "$HOME/.cursor/security-profile.json" ]]; then
        print_colored "$GREEN" "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: —Å–æ–∑–¥–∞–Ω"
        ((score++))
    else
        print_colored "$RED" "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    local percentage=$((score * 100 / max_score))
    echo ""
    print_colored "$BLUE" "üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ó–ê–©–ò–©–Å–ù–ù–û–°–¢–ò"
    print_colored "$BLUE" "=============================="
    
    if [[ $percentage -ge 90 ]]; then
        print_colored "$GREEN" "üéâ –û–¢–õ–ò–ß–ù–û: $score/$max_score ($percentage%)"
        print_colored "$GREEN" "   –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
    elif [[ $percentage -ge 70 ]]; then
        print_colored "$YELLOW" "üëç –•–û–†–û–®–û: $score/$max_score ($percentage%)"
        print_colored "$YELLOW" "   –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞, –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è"
    else
        print_colored "$RED" "‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï: $score/$max_score ($percentage%)"
        print_colored "$RED" "   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
    fi
    
    log "INFO" "Preventive measures validation completed: $score/$max_score ($percentage%)"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
install_all_measures() {
    print_colored "$PURPLE" "üõ°Ô∏è  –£–°–¢–ê–ù–û–í–ö–ê –ü–†–ï–í–ï–ù–¢–ò–í–ù–´–• –ú–ï–† CURSOR IDE"
    print_colored "$PURPLE" "========================================"
    echo ""
    
    log "INFO" "Starting installation of preventive measures"
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ backup
    print_colored "$BLUE" "üì¶ –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ backup..."
    create_cursor_backup || true
    echo ""
    
    # 2. –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∫—Å–∏
    print_colored "$BLUE" "üßπ –≠—Ç–∞–ø 2: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫..."
    clear_proxy_settings
    echo ""
    
    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print_colored "$BLUE" "üîç –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
    handle_conflicting_processes
    echo ""
    
    # 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è DNS
    print_colored "$BLUE" "üåê –≠—Ç–∞–ø 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è DNS..."
    optimize_dns
    echo ""
    
    # 5. –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    print_colored "$BLUE" "üö® –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
    create_recovery_script
    echo ""
    
    # 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print_colored "$BLUE" "üìä –≠—Ç–∞–ø 6: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    setup_monitoring
    echo ""
    
    # 7. –ü—Ä–æ—Ñ–∏–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print_colored "$BLUE" "üîí –≠—Ç–∞–ø 7: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    create_security_profile
    echo ""
    
    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    print_colored "$BLUE" "‚úÖ –≠—Ç–∞–ø 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏..."
    validate_measures
    
    echo ""
    print_colored "$GREEN" "üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
    print_colored "$GREEN" "–í—Å–µ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"
    
    log "INFO" "Preventive measures installation completed successfully"
}

# –°–ø—Ä–∞–≤–∫–∞
show_help() {
    cat << EOF
üõ°Ô∏è  Cursor Preventive Measures v1.0

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    $0 [–∫–æ–º–∞–Ω–¥–∞]

–ö–û–ú–ê–ù–î–´:
    install      –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã
    backup       –°–æ–∑–¥–∞—Ç—å backup –Ω–∞—Å—Ç—Ä–æ–µ–∫ Cursor
    clear-proxy  –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    optimize-dns –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    monitor      –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    validate     –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ—Ä
    recovery     –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    help         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–§–ê–ô–õ–´:
    $LOG_FILE
    $BACKUP_DIR/
    ~/.cursor/emergency-recovery.sh
    ~/.cursor/security-profile.json

–ü–†–ò–ú–ï–†–´:
    $0 install              # –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–µ—Ä
    $0 backup               # –°–æ–∑–¥–∞–Ω–∏–µ backup
    $0 clear-proxy          # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∫—Å–∏
    $0 validate             # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

EOF
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    local command="${1:-help}"
    
    case "$command" in
        "install"|"i")
            install_all_measures
            ;;
        "backup"|"b")
            create_cursor_backup
            ;;
        "clear-proxy"|"cp")
            clear_proxy_settings
            ;;
        "optimize-dns"|"dns")
            optimize_dns
            ;;
        "monitor"|"m")
            setup_monitoring
            ;;
        "validate"|"v")
            validate_measures
            ;;
        "recovery"|"r")
            create_recovery_script
            ;;
        "help"|"h"|"--help")
            show_help
            ;;
        *)
            print_colored "$RED" "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local deps=("curl" "dig" "python3" "bc")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        print_colored "$RED" "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing[*]}"
        print_colored "$YELLOW" "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: sudo apt install ${missing[*]}"
        exit 1
    fi
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
check_dependencies

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
