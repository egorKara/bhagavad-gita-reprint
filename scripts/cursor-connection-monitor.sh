#!/bin/bash

# Cursor Connection Monitor v1.0
# –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Cursor IDE —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
# –ê–≤—Ç–æ—Ä: Cursor Background Agent
# –î–∞—Ç–∞: 2025-08-23

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_NAME="cursor-connection-monitor"
LOG_FILE="$HOME/.cursor/connection-monitor.log"
CONFIG_FILE="$HOME/.cursor/connection-monitor.conf"
BACKUP_DIR="$HOME/.cursor/backups"
PID_FILE="/tmp/cursor-connection-monitor.pid"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "$(dirname "$LOG_FILE")" "$BACKUP_DIR"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_colored() {
    local color="$1"
    shift
    echo -e "${color}$*${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä
check_if_running() {
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            print_colored "$RED" "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: $pid)"
            exit 1
        else
            rm -f "$PID_FILE"
        fi
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ PID —Ñ–∞–π–ª–∞
create_pid_file() {
    echo $$ > "$PID_FILE"
    trap 'rm -f "$PID_FILE"; exit' INT TERM EXIT
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    CHECK_INTERVAL=300  # 5 –º–∏–Ω—É—Ç
    API_TIMEOUT=10
    MAX_RETRIES=3
    
    # –°–µ—Ä–≤–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    declare -A SERVERS=(
        ["github"]="https://api.github.com"
        ["openai"]="https://api.openai.com"
        ["cursor"]="https://api.cursor.sh"
        ["google"]="https://www.google.com"
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    fi
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
save_default_config() {
    cat > "$CONFIG_FILE" << 'EOF'
# Cursor Connection Monitor Configuration

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 = 5 –º–∏–Ω—É—Ç)
CHECK_INTERVAL=300

# –¢–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
API_TIMEOUT=10

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
MAX_RETRIES=3

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARN, ERROR)
LOG_LEVEL=INFO

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º (true/false)
AUTO_FIX=true

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (true/false)
NOTIFICATIONS=true
EOF
    print_colored "$GREEN" "‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $CONFIG_FILE"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
check_server() {
    local name="$1"
    local url="$2"
    local timeout="${3:-$API_TIMEOUT}"
    
    local start_time=$(date +%s.%N)
    local response=$(curl -s -I --max-time "$timeout" "$url" 2>/dev/null | head -1)
    local end_time=$(date +%s.%N)
    local duration=$(echo "$end_time - $start_time" | bc -l 2>/dev/null || echo "N/A")
    
    if [[ -n "$response" && "$response" =~ HTTP.*[23][0-9][0-9] ]]; then
        print_colored "$GREEN" "‚úÖ $name: OK (${duration}s)"
        log "INFO" "$name server accessible in ${duration}s"
        return 0
    else
        print_colored "$RED" "‚ùå $name: FAIL"
        log "ERROR" "$name server not accessible"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
check_dns() {
    local domain="$1"
    local result=$(dig +short "$domain" 2>/dev/null)
    
    if [[ -n "$result" ]]; then
        print_colored "$GREEN" "‚úÖ DNS –¥–ª—è $domain: OK"
        log "INFO" "DNS resolution for $domain successful: $result"
        return 0
    else
        print_colored "$RED" "‚ùå DNS –¥–ª—è $domain: FAIL"
        log "ERROR" "DNS resolution for $domain failed"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor
check_tor_processes() {
    local tor_processes=$(pgrep -f tor | wc -l)
    local tor_browser_processes=$(pgrep -f tor-browser | wc -l)
    
    if [[ "$tor_processes" -gt 0 || "$tor_browser_processes" -gt 0 ]]; then
        print_colored "$YELLOW" "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Tor –ø—Ä–æ—Ü–µ—Å—Å—ã:"
        print_colored "$YELLOW" "   ‚Ä¢ Tor: $tor_processes –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
        print_colored "$YELLOW" "   ‚Ä¢ Tor Browser: $tor_browser_processes –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
        log "WARN" "Tor processes detected: tor=$tor_processes, tor-browser=$tor_browser_processes"
        return 1
    else
        print_colored "$GREEN" "‚úÖ Tor –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        log "INFO" "No Tor processes detected"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
check_proxy_settings() {
    local proxy_vars=("HTTP_PROXY" "HTTPS_PROXY" "http_proxy" "https_proxy")
    local found_proxy=false
    
    for var in "${proxy_vars[@]}"; do
        if [[ -n "${!var:-}" ]]; then
            print_colored "$YELLOW" "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var: ${!var}"
            log "WARN" "Proxy variable detected: $var=${!var}"
            found_proxy=true
        fi
    done
    
    if [[ "$found_proxy" == false ]]; then
        print_colored "$GREEN" "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        log "INFO" "No system proxy variables detected"
        return 0
    else
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
run_diagnostics() {
    print_colored "$BLUE" "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø CURSOR IDE"
    print_colored "$BLUE" "==================================="
    echo ""
    
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    log "INFO" "Starting connection diagnostics at $timestamp"
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    print_colored "$CYAN" "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:"
    if ping -c 3 8.8.8.8 >/dev/null 2>&1; then
        print_colored "$GREEN" "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: OK"
        log "INFO" "Basic internet connection working"
    else
        print_colored "$RED" "‚ùå –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: FAIL"
        log "ERROR" "Basic internet connection failed"
        return 1
    fi
    echo ""
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
    print_colored "$CYAN" "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS:"
    check_dns "api.cursor.sh"
    check_dns "api.github.com"
    echo ""
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
    print_colored "$CYAN" "üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:"
    local server_failures=0
    
    check_server "GitHub API" "https://api.github.com" || ((server_failures++))
    check_server "OpenAI API" "https://api.openai.com" || ((server_failures++))
    check_server "Cursor API" "https://api.cursor.sh" || ((server_failures++))
    check_server "Google" "https://www.google.com" || ((server_failures++))
    echo ""
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Tor
    print_colored "$CYAN" "üïµÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ Tor –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:"
    check_tor_processes
    echo ""
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
    print_colored "$CYAN" "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
    check_proxy_settings
    echo ""
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    if [[ "$server_failures" -eq 0 ]]; then
        print_colored "$GREEN" "üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"
        log "INFO" "All diagnostics passed successfully"
        return 0
    else
        print_colored "$RED" "‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: $server_failures —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        log "ERROR" "Diagnostics failed: $server_failures servers unreachable"
        return 1
    fi
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
auto_fix_issues() {
    print_colored "$YELLOW" "üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú"
    print_colored "$YELLOW" "===================================="
    echo ""
    
    log "INFO" "Starting automatic issue fixing"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Tor –ø—Ä–æ–±–ª–µ–º
    if pgrep -f tor >/dev/null; then
        print_colored "$YELLOW" "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Tor –ø—Ä–æ—Ü–µ—Å—Å—ã - –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
        
        # –°–æ–∑–¥–∞–Ω–∏–µ backup –Ω–∞—Å—Ç—Ä–æ–µ–∫ Cursor
        local backup_file="$BACKUP_DIR/settings_before_auto_fix_$(date +%Y%m%d_%H%M%S).json"
        if [[ -f "$HOME/.cursor/User/settings.json" ]]; then
            cp "$HOME/.cursor/User/settings.json" "$backup_file"
            print_colored "$GREEN" "‚úÖ Backup —Å–æ–∑–¥–∞–Ω: $backup_file"
            log "INFO" "Backup created: $backup_file"
        fi
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ Cursor
        if [[ -f "$HOME/.cursor/User/settings.json" ]]; then
            python3 -c "
import json
import sys

try:
    with open('$HOME/.cursor/User/settings.json', 'r') as f:
        settings = json.load(f)
    
    proxy_keys = ['http.proxy', 'http.proxySupport', 'http.proxyAuthorization']
    removed = []
    
    for key in proxy_keys:
        if key in settings:
            del settings[key]
            removed.append(key)
    
    if removed:
        with open('$HOME/.cursor/User/settings.json', 'w') as f:
            json.dump(settings, f, indent=4)
        print('Removed proxy settings:', ', '.join(removed))
    else:
        print('No proxy settings found to remove')
        
except Exception as e:
    print(f'Error: {e}')
    sys.exit(1)
" && print_colored "$GREEN" "‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—â–µ–Ω—ã –∏–∑ Cursor"
        fi
        
        log "INFO" "Proxy settings cleared from Cursor configuration"
    fi
    
    print_colored "$GREEN" "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    log "INFO" "Automatic fixing completed"
}

# –†–µ–∂–∏–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor_mode() {
    print_colored "$PURPLE" "üîÑ –ó–ê–ü–£–°–ö –ù–ï–ü–†–ï–†–´–í–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê"
    print_colored "$PURPLE" "=================================="
    echo ""
    
    check_if_running
    create_pid_file
    
    load_config
    
    print_colored "$BLUE" "üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    print_colored "$BLUE" "‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${CHECK_INTERVAL}s"
    print_colored "$BLUE" "‚Ä¢ –¢–∞–π–º–∞—É—Ç API: ${API_TIMEOUT}s"
    print_colored "$BLUE" "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: ${MAX_RETRIES}"
    print_colored "$BLUE" "‚Ä¢ –õ–æ–≥ —Ñ–∞–π–ª: $LOG_FILE"
    print_colored "$BLUE" "‚Ä¢ PID —Ñ–∞–π–ª: $PID_FILE"
    echo ""
    
    log "INFO" "Starting continuous monitoring (PID: $$)"
    
    local failure_count=0
    
    while true; do
        if run_diagnostics >/dev/null 2>&1; then
            failure_count=0
            print_colored "$GREEN" "$(date '+%H:%M:%S') ‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        else
            ((failure_count++))
            print_colored "$RED" "$(date '+%H:%M:%S') ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã (–ø–æ–ø—ã—Ç–∫–∞ $failure_count/$MAX_RETRIES)"
            
            if [[ "$failure_count" -ge "$MAX_RETRIES" ]]; then
                print_colored "$YELLOW" "üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
                auto_fix_issues
                failure_count=0
            fi
        fi
        
        sleep "$CHECK_INTERVAL"
    done
}

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
generate_report() {
    local report_file="cursor-connection-report-$(date +%Y%m%d-%H%M%S).md"
    
    cat > "$report_file" << EOF
# –û—Ç—á—ë—Ç –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ Cursor IDE

**–î–∞—Ç–∞:** $(date '+%Y-%m-%d %H:%M:%S')  
**–°–∏—Å—Ç–µ–º–∞:** $(uname -a)  
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** $(whoami)  

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

$(run_diagnostics 2>&1)

## –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

### –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
\`\`\`
$(ip addr show | grep -E "(inet |inet6 )")
\`\`\`

### –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
\`\`\`
$(ss -tlnp | head -20)
\`\`\`

### DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
\`\`\`
$(cat /etc/resolv.conf)
\`\`\`

### Tor –ø—Ä–æ—Ü–µ—Å—Å—ã
\`\`\`
$(ps aux | grep -E "\\btor\\b" | grep -v grep || echo "–ù–µ –Ω–∞–π–¥–µ–Ω—ã")
\`\`\`

## –õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫)
\`\`\`
$(tail -50 "$LOG_FILE" 2>/dev/null || echo "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
\`\`\`

---
*–û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–º $SCRIPT_NAME*
EOF

    print_colored "$GREEN" "‚úÖ –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: $report_file"
    log "INFO" "Report generated: $report_file"
}

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
clean_logs() {
    if [[ -f "$LOG_FILE" ]]; then
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫
        tail -1000 "$LOG_FILE" > "${LOG_FILE}.tmp"
        mv "${LOG_FILE}.tmp" "$LOG_FILE"
        print_colored "$GREEN" "‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫)"
        log "INFO" "Logs cleaned, kept last 1000 lines"
    else
        print_colored "$YELLOW" "‚ö†Ô∏è  –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
stop_monitor() {
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
            rm -f "$PID_FILE"
            print_colored "$GREEN" "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (PID: $pid)"
            log "INFO" "Monitor stopped (PID: $pid)"
        else
            rm -f "$PID_FILE"
            print_colored "$YELLOW" "‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
        fi
    else
        print_colored "$YELLOW" "‚ö†Ô∏è  PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    print_colored "$BLUE" "üìä –°–¢–ê–¢–£–° CURSOR CONNECTION MONITOR"
    print_colored "$BLUE" "==================================="
    echo ""
    
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            print_colored "$GREEN" "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $pid)"
            print_colored "$BLUE" "‚Ä¢ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: $(ps -o lstart= -p "$pid")"
            print_colored "$BLUE" "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: $(ps -o %cpu= -p "$pid")%"
            print_colored "$BLUE" "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $(ps -o %mem= -p "$pid")%"
        else
            print_colored "$RED" "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (stale PID: $pid)"
            rm -f "$PID_FILE"
        fi
    else
        print_colored "$YELLOW" "‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    echo ""
    
    if [[ -f "$LOG_FILE" ]]; then
        print_colored "$BLUE" "üìÑ –õ–æ–≥ —Ñ–∞–π–ª: $LOG_FILE"
        print_colored "$BLUE" "‚Ä¢ –†–∞–∑–º–µ—Ä: $(du -h "$LOG_FILE" | cut -f1)"
        print_colored "$BLUE" "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:"
        tail -5 "$LOG_FILE" | while read line; do
            print_colored "$BLUE" "  $line"
        done
    else
        print_colored "$YELLOW" "‚ö†Ô∏è  –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –°–ø—Ä–∞–≤–∫–∞
show_help() {
    cat << EOF
üîç Cursor Connection Monitor v1.0

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    $0 [–∫–æ–º–∞–Ω–¥–∞]

–ö–û–ú–ê–ù–î–´:
    check        –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–æ–≤—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    monitor      –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (daemon)
    stop         –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    status       –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    fix          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    report       –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç
    config       –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    clean        –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
    help         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–§–ê–ô–õ–´:
    $LOG_FILE
    $CONFIG_FILE
    $BACKUP_DIR/

–ü–†–ò–ú–ï–†–´:
    $0 check                 # –†–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    $0 monitor              # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
    $0 status               # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    $0 stop                 # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    $0 fix                  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    $0 report               # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞

–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤ crontab:
    @reboot $PWD/$0 monitor

EOF
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    local command="${1:-help}"
    
    case "$command" in
        "check"|"c")
            run_diagnostics
            ;;
        "monitor"|"m")
            monitor_mode
            ;;
        "stop"|"s")
            stop_monitor
            ;;
        "status"|"st")
            show_status
            ;;
        "fix"|"f")
            auto_fix_issues
            ;;
        "report"|"r")
            generate_report
            ;;
        "config"|"conf")
            save_default_config
            ;;
        "clean"|"cl")
            clean_logs
            ;;
        "help"|"h"|"--help")
            show_help
            ;;
        *)
            print_colored "$RED" "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local deps=("curl" "dig" "ping" "ss" "python3")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        print_colored "$RED" "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing[*]}"
        print_colored "$YELLOW" "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: sudo apt install ${missing[*]}"
        exit 1
    fi
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
check_dependencies
load_config

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
